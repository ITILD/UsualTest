{"version":3,"file":"cesiumplugin.mjs","sources":["../src/core/TMFunc1.js","../src/core/init/InitViewer.js","../src/core/init/ViwerSet.js","../src/core/math/ComputationalGeom.js","../src/core/math/UsualGeom.js","../src/core/control/mouse/MouseListen.js","../src/core/translate/LocalAndWorldTransform.js","../src/core/primitives/clipPlanes/ClippingPlanesByGeom.js","../src/core/renderGeom/RenderSimple.js","../src/core/mouse/HoleDraw.js","../src/core/renderGeom/RenderInstance.js","../src/core/renderModel/RenderGlb.js","../src/core/renderModel/renderModelByprimitive.js","../src/core/tiles/CesiumPrimitivesProvider.js","../src/core/tiles/Universal3DSceneInterface.js","../src/core/translate/M4Translate.js","../src/core/translate/MouseClickTrans.js","../src/core/translate/TranslateSevenParams.js","../src/core/translate/WorldPositionTransform.js","../src/core/draw/mouse/BaseDraw.js","../src/core/control/camera/CameraPro.js","../src/core/control/event/HandlerManager.js","../src/core/primitives/BaseData/BaseLayers.js","../src/core/primitives/clipPlanes/RenderPlanes.js","../src/core/primitives/DEM/TerrainProvider.js","../src/core/primitives/manager/PrimitivesTree.js","../src/cesiumplugin.js"],"sourcesContent":["function TMFunc1() {\r\n  console.log('TMFunc1')\r\n}\r\n\r\nexport { TMFunc1 }\r\n","class InitViewer {\r\n\r\n  /**\r\n   * \r\n   * @param {*} defaultAccessToken 外网cesium ion 密钥\r\n   */\r\n  constructor(defaultAccessToken) {\r\n    this.viewers = new Map()\r\n    Cesium.Ion.defaultAccessToken = defaultAccessToken || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2MTRiM2IxYy1iZGZkLTRmOTktYWVhMi0xZTE2ZjU4NzliMDMiLCJpZCI6Mzc0NjAsImlhdCI6MTYwNTA3NzQ1MX0.GEvT_KwEV9MjAqyXHyS-ezcITyKc53X3MQDWBLPElI0'\r\n\r\n  }\r\n\r\n  static getInstance() {\r\n    if (!this.Instance) {\r\n      this.Instance = new InitViewer();\r\n    }\r\n    return this.Instance;\r\n  }\r\n\r\n  addViewer(viewerId) {\r\n    let viewer = new Cesium.Viewer(viewerId, {\r\n\r\n      /**\r\n       * 小部件\r\n       */\r\n      //true\t如果设置为false，将不创建“动画”窗口小部件。\r\n      animation: !false,\r\n\r\n      //true \t如果设置为false，则不会创建BaseLayerPicker窗口小部件。\r\n      baseLayerPicker: !false,\r\n\r\n      //true \t如果设置为false，将不会创建FullscreenButton小部件。\r\n      fullscreenButton: !false,\r\n\r\n      //false \t如果设置为true，将创建VRButton小部件。\r\n      vrButton: false,\r\n\r\n      //true \t如果设置为false，则不会创建Geocoder小部件。 地理编码查询\r\n      //布尔 | Array。< GeocoderService > \t<可选>\r\n      geocoder: false,\r\n\r\n      //true \t如果设置为false，将不会创建HomeButton小部件。\r\n      homeButton: false,\r\n\r\n      //true \t如果设置为false，则不会创建InfoBox小部件。\r\n      infoBox: false,\r\n\r\n      //true \t如果设置为false，将不会创建SceneModePicker小部件。\r\n      sceneModePicker: false,\r\n\r\n      //true \t如果设置为false，将不会创建SelectionIndicator小部件。\r\n      selectionIndicator: false,\r\n\r\n      //true \t如果设置为false，则不会创建“时间轴”窗口小部件。\r\n      timeline: !false,\r\n\r\n      //true \t如果设置为false，将不会创建导航帮助按钮。\r\n      navigationHelpButton: false,\r\n\r\n      //true \t如果导航说明最初应该是可见的，则为true；如果直到用户明确单击该按钮才显示，则为false。\r\n      navigationInstructionsInitiallyVisible: false,\r\n\r\n      //false \ttrue设为时，每个几何实例将仅以3D渲染以节省GPU内存。\r\n      //scene3DOnly: true,\r\n      //false \ttrue默认情况下时钟是否应尝试提前模拟时间，false否则。此选项优先于setting Viewer#clockViewModel。\r\n      //shouldAnimate : true,\r\n      // 新ClockViewModel（clock） \t用于控制当前时间的时钟视图模型。ClockViewModel \t<可选>\r\n      // clockViewModel \t\r\n      // 当前基础影像图层的视图模型（如果未提供）将使用第一个可用的基础图层。仅当“ baseLayerPicker”设置为true时，此值才有效。\r\n      // selectedImageryProviderViewModel \tProviderViewModel \t<可选>\r\n      // createDefaultImageryProviderViewModels（） \t可以从BaseLayerPicker中选择的ProviderViewModels数组。仅当“ baseLayerPicker”设置为true时，此值才有效。\r\n\r\n      // imageryProviderViewModels \tArray。< ProviderViewModel > \t<可选>\r\n      // 当前基础地形图层的视图模型（如果未提供）将使用第一个可用的基础图层。仅当“ baseLayerPicker”设置为true时，此值才有效。\r\n      // selectedTerrainProviderViewModel \tProviderViewModel \t<可选>\r\n      // createDefaultTerrainProviderViewModels（） \t可以从BaseLayerPicker中选择的ProviderViewModels数组。仅当“ baseLayerPicker”设置为true时，此值才有效。\r\n      // terrainProviderViewModels \tArray。< ProviderViewModel > \t<可选>\r\n      // createWorldImagery（） \t要使用的图像提供者。仅当“ baseLayerPicker”设置为false时，此值才有效。\r\n      // imageryProvider \t影像提供者 \t<可选>\r\n      // imageryProvider: new Cesium.OpenStreetMapImageryProvider({\r\n      //   url: 'https://a.tile.openstreetmap.org/'\r\n      // }),\r\n      //   新的EllipsoidTerrainProvider（） \tDEM \t<可选>\r\n      // terrainProvider: Cesium.createWorldTerrain({//cesium世界地形\r\n      //   requestWaterMask: true, // required for water effects\r\n      //   requestVertexNormals: true // required for terrain lighting\r\n      // }),\r\n      //     用来渲染星星的天空盒。当为时undefined，使用默认星号。如果设置为false，则不会添加skyBox，Sun或Moon。\r\n      // skyBox \t天空盒 | false \t<可选>\r\n\r\n      // 蓝天，以及围绕地球四肢的辉光。设置为false将其关闭。 球内天空盒？？\r\n      // skyAtmosphere: false,\r\n      //   document.body \t按下全屏按钮时要置于全屏模式的元素或ID。\r\n      // fullscreenElement \t元素 | 细绳 \t<可选>\r\n\r\n      // useDefaultRenderLoop \r\n      //true \t如果此小部件应控制渲染循环，则为true，否则为false。\r\n      // targetFrameRate \t数字 \t<可选>\r\n      //     使用默认渲染循环时的目标帧速率。\r\n      // showRenderLoopErrors \r\n      //true \t如果为true，则在发生渲染循环错误时，此小部件将自动向包含false用户显示HTML面板。\r\n      // useBrowserRecommendedResolution \r\n      //true \t如果为true，则以浏览器建议的分辨率进行渲染，然后忽略window.devicePixelRatio。\r\n      // automaticallyTrackDataSourceClocks \r\n      //true \t如果为true，则此小部件将自动跟踪新添加的数据源的时钟设置，并在数据源的时钟发生更改时进行更新。如果要独立配置时钟，请将其设置为false。\r\n      // contextOptions \t目的 \t<可选>\r\n      //     与options传递给的上下文和WebGL创建属性相对应Scene。\r\n      // sceneMode \t场景模式 \t<可选>\r\n      //   SceneMode.SCENE3D \t初始场景模式。\r\n      // mapProjection \t地图投影 \t<可选>\r\n      //   新的GeographicProjection（） \t在2D和Columbus View模式下使用的地图投影。\r\n      // globe \t地球仪 | false \t<可选>\r\n      //   新Globe（mapProjection.ellipsoid） \t场景中使用的地球仪。如果设置为false，则不会添加任何地球仪。\r\n      // orderIndependentTranslucency \r\n      //true \t如果为true且配置支持它，则使用顺序无关的半透明性。\r\n      // creditContainer \t元素 | 细绳 \t<可选>\r\n      //     包含的DOM元素或ID CreditDisplay。如果未指定，则将信用额添加到小部件本身的底部。\r\n\r\n      //     包含由创建的弹出广告的DOM元素或ID CreditDisplay。如果未指定，它将显示在小部件本身上。\r\n\r\n      // creditViewport \t元素 | 细绳 \t<可选>\r\n      //   新的DataSourceCollection（） \t小部件可视化的数据源集合。如果提供此参数，则假定实例由调用方拥有，并且在销毁查看器时不会销毁该实例。\r\n\r\n      // dataSources \t数据源集合 \t<可选>\r\n      //   1.0 \t用于放大地形的标量。请注意，地形夸张不会修改任何其他相对于椭球的图元。\r\n\r\n      // terrainExaggeration \t数字 \t<可选>\r\n      //   false \t确定阴影是否由光源投射。\r\n\r\n      // shadows \r\n      //   ShadowMode.RECEIVE_ONLY \t确定地形是投射还是接收来自光源的阴影。\r\n\r\n      // terrainShadows \t阴影模式 \t<可选>\r\n      //   MapMode2D.INFINITE_SCROLL \t确定2D地图是可旋转的还是可以在水平方向上无限滚动。\r\n\r\n      // mapMode2D \tMapMode2D \t<可选>\r\n      //   false \t如果设置为true，将创建ProjectionPicker小部件。\r\n\r\n      // projectionPicker \r\n      //   false \t如果为true，则仅根据场景中的更改确定是否需要渲染帧。启用可减少应用程序的CPU / GPU使用率，并减少移动设备上的电池消耗，但需要Scene#requestRender在此模式下显式渲染新帧。在API的其他部分对场景进行更改后，在许多情况下这是必要的。请参见使用显式渲染提高性能。\r\n\r\n      // requestRenderMode \r\n      //   0.0 \t如果requestRenderMode为true，则此值定义在请求渲染之前允许的最大模拟时间更改。请参见使用显式渲染提高性能。\r\n\r\n      // maximumRenderTimeChange \t数字 \t<可选>\r\n\r\n    });\r\n    viewer.imageryLayers.removeAll()\r\n    this.viewers.set(viewerId, viewer)\r\n\r\n    return viewer;\r\n  }\r\n\r\n}\r\nexport { InitViewer }\r\n\r\n// https://blog.csdn.net/moyebaobei1/article/details/106102726/","/**\r\n * 管线类viewer初始设置\r\n * @param {*} viewer \r\n */\r\nfunction ViwerSet(viewer) {\r\n\r\n  // 禁用默认的实体双击动作。\r\n  viewer.screenSpaceEventHandler.removeInputAction(\r\n    Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\r\n  );\r\n  viewer.screenSpaceEventHandler.removeInputAction(\r\n    Cesium.ScreenSpaceEventType.LEFT_CLICK\r\n  );\r\n\r\n  //移动设备上禁掉以下几个选项，可以相对更加流畅\r\n  if (!haoutil.system.isPCBroswer()) {\r\n    viewer.targetFrameRate = 20; //限制帧率\r\n    viewer.requestRenderMode = true; //取消实时渲染\r\n    viewer.scene.fog.enable = false;\r\n    viewer.scene.skyAtmosphere.show = false;\r\n    viewer.scene.fxaa = false;\r\n  }\r\n\r\n  //IE浏览器优化\r\n  if (window.navigator.userAgent.toLowerCase().indexOf(\"msie\") >= 0) {\r\n    viewer.targetFrameRate = 20; //限制帧率\r\n    viewer.requestRenderMode = true; //取消实时渲染\r\n  }\r\n\r\n  //更改配置，性能优化\r\n  viewer.scene.logarithmicDepthBuffer = false;\r\n\r\n  //  开启抗锯齿功能(会造成字体和图片不清晰)\r\n  viewer.scene.postProcessStages.fxaa.enabled = false;\r\n  console.log(\"--------\", \"postProcessStages.fxaa.enabled = true\")\r\n\r\n  // langxj 关闭HDR模式，让界面显示更清晰\r\n  viewer.scene.highDynamicRange = false;\r\n  Cesium.RequestScheduler.maximumRequests = 100;\r\n  Cesium.RequestScheduler.maximumRequestsPerServer = 100;\r\n\r\n  //二三维切换不用动画\r\n  if (viewer.sceneModePicker) viewer.sceneModePicker.viewModel.duration = 0.0;\r\n\r\n  //抗锯齿\r\n  let supportsImageRenderingPixelated = viewer.cesiumWidget._supportsImageRenderingPixelated;\r\n  if (supportsImageRenderingPixelated) {\r\n\r\n    // 直接拿到设备的像素比例因子 - 如我设置的1.25\r\n    let vtxf_dpr = window.devicePixelRatio;\r\n\r\n    // 这个while我们在后面会做一个说明，但不是解决问题的说明\r\n    while (vtxf_dpr >= 2.0) { vtxf_dpr /= 2.0; }\r\n\r\n    // 设置渲染分辨率的比例因子\r\n    viewer.resolutionScale = vtxf_dpr;\r\n  }\r\n\r\n}\r\n\r\nexport { ViwerSet };","class ComputationalGeom {\r\n\r\n  /**\r\n   * 几何部分计算\r\n   */\r\n  constructor() {\r\n\r\n  }\r\n\r\n  // 快速\r\n\r\n  static booleanClockwise() {\r\n\r\n  }\r\n\r\n  // 窗口坐标   最快顺逆时针\r\n  static booleanClockwiseWindow() {\r\n\r\n  }\r\n\r\n  // 地球法线方向顺逆\r\n  static booleanClockwiseGloble() {\r\n\r\n  }\r\n\r\n  //凸包（完全顺时针 完全逆时针）\r\n\r\n  // 点插值\r\n  /**\r\n   * 计算最佳线性插值 加密点\r\n   * @param {*} positionTwo \r\n   * @param {*} density  密度 点数/m   最佳5？\r\n   * @returns \r\n   */\r\n  static getLerpByPoints(positionTwo, density) {\r\n    let pointStart = positionTwo[0]\r\n    let pointEnd = positionTwo[1]\r\n    let positions = [pointStart]\r\n\r\n    // 总点数 向上取整\r\n    let countPoints = Math.ceil(density * Cesium.Cartesian3.distance(pointStart, pointEnd, new Cesium.Cartesian3())) //密度*长度\r\n    for (let i = 1; i < countPoints; i++) {\r\n      let ponitThis = Cesium.Cartesian3.lerp(pointStart, pointEnd, i / countPoints, new Cesium.Cartesian3())\r\n      positions.push(ponitThis);\r\n    }\r\n    positions.push(pointEnd);\r\n    return positions\r\n  }\r\n\r\n  /**\r\n   * 绘制凸包检测toleft简单验证  地球法线正向\r\n   */\r\n  static polygonDirectionSet(clickPositions, polygonDirection) {\r\n\r\n    // ToLeftTest  凸包  考虑最后\r\n    let i = clickPositions.length - 1\r\n    let points = clickPositions\r\n    let directionLast = Cesium.Cartesian3.subtract(points[i - 1], points[i - 2], new Cesium.Cartesian3())\r\n    let directionNow = Cesium.Cartesian3.subtract(points[i], points[i - 1], new Cesium.Cartesian3())\r\n\r\n    // 前向\r\n    let directionUpNow = Cesium.Cartesian3.cross(directionLast, directionNow, new Cesium.Cartesian3())\r\n    let directionPointDirectionUpNowAngle = Cesium.Cartesian3.angleBetween(directionUpNow, points[i]) // 前向绘制线法向\r\n    // 后向\r\n    let directionEnd = Cesium.Cartesian3.subtract(points[i], points[0], new Cesium.Cartesian3())\r\n    let directionUpEnd = Cesium.Cartesian3.cross(directionEnd, directionNow, new Cesium.Cartesian3())\r\n    let directionPointDirectionUpEndAngle = Cesium.Cartesian3.angleBetween(directionUpEnd, points[i]) // 后向绘制线法向\r\n\r\n    // 凹多边形（绘制中顺逆变化）\r\n    if (directionPointDirectionUpNowAngle < 1.57) {\r\n      if (directionPointDirectionUpEndAngle > 1.57) {\r\n\r\n        // 中途变化\r\n        // debugger\r\n        // 指示出错\r\n        // this._mouseMovePointPrimitives.position = this._clickPositions[this._clickPositions.length - 2]\r\n        // alert('false')\r\n      }\r\n      console.log('逆时针')\r\n      polygonDirection = -1\r\n\r\n    } else {\r\n      if (directionPointDirectionUpEndAngle < 1.57) {\r\n\r\n        // debugger\r\n        // this._mouseMovePointPrimitives.position = this._clickPositions[this._clickPositions.length - 2]\r\n        // alert('false')\r\n      }\r\n      console.log('顺时针')\r\n      polygonDirection = 1\r\n    }\r\n\r\n    return polygonDirection\r\n\r\n  }\r\n\r\n}\r\nexport { ComputationalGeom }","class UsualGeom{\r\n\r\n}\r\n\r\nexport{UsualGeom}","class MouseListen {\r\n\r\n  /**\r\n   * 监听器 记录鼠标移动点选双击\r\n   * \r\n   * @param {*} viewer \r\n   */\r\n  constructor(viewer) {\r\n\r\n    // cesium\r\n    this.viewer = viewer\r\n    this.handler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas)\r\n  }\r\n\r\n  /**\r\n   * 监听鼠标状态\r\n   * 鼠标场景位置集合  \r\n   * （自行继承组织点线面切面等几何图形）\r\n   */\r\n  stateStart() {\r\n    this._clickPositionsArrays = [] //多次\r\n    this._clickPositions = [0] //动态单次  使用数组最后一位记录移动标识\r\n    this.click_LEFT_CLICK_Time = new Date()\r\n  }\r\n\r\n  drawListen() {\r\n    this.stateStart()\r\n\r\n    // 动态\r\n    this.handler.setInputAction((movement) => {\r\n      if (!movement.endPosition) { return }\r\n      let clickScene = this.viewer.scene.pickPosition(movement.endPosition) //let clickWindow = click.position/movement.endPosition\r\n      if (clickScene) { this._clickPositions[this._clickPositions.length - 1] = clickScene }\r\n      this.click_MOUSE_MOVE = this._clickPositions\r\n    }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\r\n\r\n    // 过程固定  \r\n    this.handler.setInputAction((click) => {\r\n      let clickScene = this.viewer.scene.pickPosition(click.position) //防止空洞选取\r\n      if (clickScene && this.singleLeftClickBool()) { //单击和双击第一次点击\r\n        // 直接保留最后\r\n        this.click_LEFT_CLICK = this._clickPositions\r\n\r\n        // 默认监move听到最后一点，随意加移动新点\r\n        this._clickPositions.push(clickScene) //0\r\n      }\r\n    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n\r\n    // 固定\r\n    this.handler.setInputAction((click) => {\r\n      let clickWindow = click.position\r\n      let clickScene = this.viewer.scene.pickPosition(clickWindow)\r\n      if (clickScene) {\r\n\r\n        // 剔除最后移动点\r\n        this._clickPositions.pop()\r\n\r\n        //位置集合 直接保留最后\r\n        this._clickPositionsArrays.push(this._clickPositions)\r\n        this._clickPositionsStatic = this._clickPositions.slice(0)\r\n        this.click_LEFT_DOUBLE_CLICK = this._clickPositions\r\n\r\n        /***********************************注意重置本次鼠标记录数组 添加移动点0****************************************** */\r\n        this._clickPositions = [0]\r\n      }\r\n    }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\r\n  }\r\n\r\n  // 监听\r\n  set click_MOUSE_MOVE(value) { this.test() }\r\n  set click_LEFT_CLICK(value) { this.test() }\r\n  set click_LEFT_DOUBLE_CLICK(value) { this.test() }\r\n\r\n  removeAll() {\r\n    this.handler = this.handler && this.handler.destroy();\r\n    this.handler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas)\r\n    this._clickPositionsArrays = null //多次集成\r\n    this._clickPositions = null //动态单次\r\n\r\n  }\r\n\r\n  /**\r\n   * 判断此次点击 单击true/双击false  默认双击包含最后一次单击\r\n   * @returns \r\n   */\r\n  singleLeftClickBool() {\r\n    let click_LEFT_CLICK_TimeNew = new Date()\r\n    let leftClickTimeBool = (click_LEFT_CLICK_TimeNew - this.click_LEFT_CLICK_Time) > 300 //时间判定mm\r\n    let leftClickDistanceBool = (this._clickPositions.length < 2) || //第一次点选默认距离符合单击\r\n      (Cesium.Cartesian3.distance(this._clickPositions[this._clickPositions.length - 1], this._clickPositions[this._clickPositions.length - 2]) > 0.1) //双击距离判定m\r\n    this.click_LEFT_CLICK_Time = click_LEFT_CLICK_TimeNew\r\n\r\n    return leftClickTimeBool || leftClickDistanceBool\r\n  }\r\n\r\n  test() {\r\n    console.log(this._clickPositions)\r\n    console.log(this._clickPositionsArrays)\r\n  }\r\n\r\n}\r\nexport { MouseListen }","/**\r\n\r\n * 局部坐标系与世界坐标系转换，局部坐标系的轴方向由可选参数direction控制，默认是eastNorthUp北、东、上为轴线\r\n\r\n * 初始化转换用逆矩阵\r\n\r\n * @param {Number} RCSorigincenter 世界坐标系中的笛卡尔三维坐标\r\n\r\n * @param {Number} direction 坐标轴方向，值是\"northEastDown\",\"northUpEast\",\"northWestUp\",\"eastNorthUp\"(默认)!!\r\n\r\n */\r\n\r\nclass LocalAndWorldTransform {\r\n  constructor(RCSorigincenter, direction) {\r\n\r\n    // let RCSorigincenter = Cesium.Cartesian3.fromDegrees(longitude, latitude, height);\r\n\r\n    if (direction == 'northEastDown') {\r\n      this.RCSMatrix =\r\n        Cesium.Transforms.northEastDownToFixedFrame(RCSorigincenter)\r\n    } else if (direction == 'northUpEast') {\r\n      this.RCSMatrix =\r\n        Cesium.Transforms.northUpEastToFixedFrame(RCSorigincenter)\r\n    } else if (direction == 'northWestUp') {\r\n      this.RCSMatrix =\r\n        Cesium.Transforms.northWestUpToFixedFrame(RCSorigincenter)\r\n    } else {\r\n      this.RCSMatrix =\r\n        Cesium.Transforms.eastNorthUpToFixedFrame(RCSorigincenter)\r\n    }\r\n\r\n    this.RCSmatrixInverse = Cesium.Matrix4.inverseTransformation(\r\n      this.RCSMatrix,\r\n      new Cesium.Matrix4()\r\n    )\r\n  }\r\n\r\n  /**\r\n\r\n   * 局部坐标转换成对应的世界坐标\r\n\r\n   *\r\n\r\n   * @param {Object} localCoordinates 局部坐标系_笛卡尔，如 {x:1,y:1,z:1}\r\n\r\n   * @param {Object} result 世界坐标系_笛卡尔\r\n   * @returns\r\n\r\n   */\r\n\r\n  localToWorldCoordinates(localCoordinates, result) {\r\n    if (!result) {\r\n      result = new Cesium.Cartesian3()\r\n    }\r\n\r\n    Cesium.Matrix4.multiplyByPoint(this.RCSMatrix, localCoordinates, result)\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n\r\n   * 世界坐标转换成对应的局部坐标\r\n\r\n   *\r\n\r\n   * @param {Object} WorldCoordinates 世界坐标系_笛卡尔\r\n\r\n   * @param {Object} result 局部坐标系_笛卡尔\r\n\r\n   * @returns\r\n\r\n   */\r\n\r\n  WorldCoordinatesTolocal(WorldCoordinates, result) {\r\n    if (!result) {\r\n      result = new Cesium.Cartesian3()\r\n    }\r\n\r\n    Cesium.Matrix4.multiplyByPoint(\r\n      this.RCSmatrixInverse,\r\n      WorldCoordinates,\r\n      result\r\n    )\r\n\r\n    return result\r\n  }\r\n}\r\n\r\nexport { LocalAndWorldTransform }","import {\r\n  LocalAndWorldTransform\r\n} from \"../../translate/LocalAndWorldTransform.js\";\r\n\r\n/**\r\n * 根据三维图形Geom裁剪隐藏渲染内容\r\n * \r\n */\r\nclass ClippingPlanesByGeom {\r\n\r\n  /**\r\n   * 裁剪 单个gltf模型，3D Tileset或Globe的指定对象列表外部区域中的渲染 entity._model\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * \r\n   * @param {*} modelsArray \r\n   * @param {*} points \r\n   * @param {*} directionStart 顺时针1逆时针-1 确定各面法线方向\r\n   */\r\n  static setClippingPlanesSimple(modelsArray, points, directionStart) {\r\n    debugger\r\n    for (let index = 0; index < modelsArray.length; index++) {\r\n      let model = modelsArray[index];\r\n      let clippingPlanes = []\r\n      switch (model.constructor.name) {\r\n      case \"Globe\":\r\n        debugger\r\n        for (let i = 0; i < points.length; ++i) {\r\n\r\n          // 每个两点中点坐标   球面法线方向\r\n          let nextIndex = (i + 1) % points.length\r\n\r\n          // 地球表面正上方 与模型局部正上方 let up = new Cesium.Cartesian3(0, 0, 10)不一致 \r\n          let up = Cesium.Cartesian3.add(points[i], points[nextIndex], new Cesium.Cartesian3()) //接近中点\r\n          // 坐标差  0->1矢量\r\n          let right = Cesium.Cartesian3.subtract(points[i], points[nextIndex], new Cesium.Cartesian3())\r\n          Cesium.Cartesian3.multiplyByScalar(right, directionStart, right) // 根据绘制方向修改方向\r\n          // 法线 裁切方向\r\n          let normal = Cesium.Cartesian3.cross(right, up, new Cesium.Cartesian3())\r\n\r\n          // 裁剪面\r\n          let planeTmp = Cesium.Plane.fromPointNormal(points[i], normal)\r\n          clippingPlanes.push(Cesium.ClippingPlane.fromPlane(planeTmp))\r\n\r\n        }\r\n        break;\r\n      case \"Cesium3DTileset\":\r\n        debugger\r\n\r\n        // 3dtiles局部坐标集合\r\n        let point3DtilesPositions = []\r\n        let localAndWorldTransform = new LocalAndWorldTransform(model.boundingSphere.center)\r\n        points.forEach(clickPosition => {\r\n          let postion = localAndWorldTransform.WorldCoordinatesTolocal(clickPosition)\r\n          point3DtilesPositions.push(postion)\r\n        });\r\n        debugger\r\n        for (let i = 0; i < point3DtilesPositions.length; ++i) {\r\n          let nextIndex = (i + 1) % point3DtilesPositions.length\r\n          let up = new Cesium.Cartesian3(0, 0, 10) //局部坐标垂向\r\n          let right = Cesium.Cartesian3.subtract(point3DtilesPositions[i], point3DtilesPositions[nextIndex], new Cesium.Cartesian3()) // 坐标差  点1->2矢量\r\n          Cesium.Cartesian3.multiplyByScalar(right, directionStart, right)\r\n\r\n          // 法线 裁切方向\r\n          let normal = Cesium.Cartesian3.cross(right, up, new Cesium.Cartesian3())\r\n          let planeTmp = Cesium.Plane.fromPointNormal(point3DtilesPositions[i], normal)\r\n          clippingPlanes.push(Cesium.ClippingPlane.fromPlane(planeTmp))\r\n\r\n        }\r\n        break;\r\n      case \"Model\":\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n      }\r\n\r\n      //裁切\r\n      model.clippingPlanes = new Cesium.ClippingPlaneCollection({\r\n        planes: clippingPlanes,\r\n        edgeWidth: 1,\r\n        edgeColor: Cesium.Color.WHITE,\r\n\r\n        // unionClippingRegions: !false,\r\n        // edgeColor: Cesium.Color.fromBytes(161, 169, 173, 255),\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  static destroyAll(modelsArray) {\r\n    modelsArray.forEach(model => {\r\n      model.clippingPlanes = model.clippingPlanes && model.clippingPlanes.destroy();\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  ClippingPlanesByGeom\r\n}","class RenderSimple {\r\n\r\n  /**\r\n   * 无固定场景宽度点线面\r\n   */\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 带高程\r\n   * @param {*} pointPrimitives PointPrimitiveCollection\r\n   * @param {*} position 经度，纬度和高度值的列表。\r\n   * @param {*} width 线宽\r\n   * @param {*} color 颜色 \"#FF0000\"   Cesium.Color.fromCssColorString('#67ADDF')   Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9); Cesium.Color.fromRgba(0x67ADDFFF);\r\n   * @param {*} outlineWidth 外轮廓\r\n   */\r\n  static simplePointByPrimitives(\r\n    PrimitiveCollection,\r\n    position,\r\n    width,\r\n    color1,\r\n    outlineWidth\r\n  ) {\r\n\r\n    let pointPrimitive = PrimitiveCollection.add({\r\n      show: true,\r\n      position: position,\r\n      pixelSize: width,\r\n      color: color1 || Cesium.Color.WHITE,\r\n      outlineColor: Cesium.Color.WHITE,\r\n      outlineWidth: outlineWidth || 1.0,\r\n      id: undefined\r\n    });\r\n\r\n    return pointPrimitive\r\n  }\r\n\r\n  // /**\r\n  //  * 带高程\r\n  //  * @param {*} PrimitiveCollection PrimitiveCollection\r\n  //  * @param {*} positions \r\n  //  * @param {*} width 线宽\r\n  //  * @param {*} color 颜色 \"#FF0000\"\r\n  //  * @param {*} alpha 透明度\r\n  //  */\r\n  // static simpleLineByPrimitive(\r\n  //   PrimitiveCollection,\r\n  //   positions,\r\n  //   width,\r\n  //   color,\r\n  //   alpha\r\n  // ) {\r\n  //   debugger\r\n  //   let linePrimitive = PrimitiveCollection.add({\r\n  //     positions: positions,\r\n  //     width: width,\r\n\r\n  //     // https://www.jianshu.com/p/a983160234ad 材质\r\n  //     material: Cesium.Material.fromType(Cesium.Material.PolylineGlowType, {\r\n  //       glowPower: 0.2,\r\n  //       taperPower: 0.9, //锥体\r\n  //       color: color\r\n  //     }),\r\n  //   });\r\n  //   return linePrimitive\r\n  // }\r\n\r\n  static simplePolygonByPrimitive(\r\n    PrimitiveCollection,\r\n    positions,\r\n    width,\r\n    color,\r\n    alpha) {}\r\n\r\n  static simplePolygonByPrimitiveInstance(\r\n    PrimitiveCollection,\r\n    positions,\r\n    color,\r\n    DiffuseMapImage) {\r\n    let materialOption\r\n    if (color) {\r\n      materialOption = {\r\n        fabric: {\r\n          type: 'Color',\r\n          uniforms: {\r\n            color: color\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (DiffuseMapImage) {\r\n      materialOption = {\r\n        fabric: {\r\n          type: 'DiffuseMap',\r\n          uniforms: {\r\n            image: DiffuseMapImage,\r\n            repeat: { x: 1, y: 1 }, //不重复\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let polygonInstance = new Cesium.GeometryInstance({\r\n      geometry: new Cesium.PolygonGeometry({\r\n        polygonHierarchy: new Cesium.PolygonHierarchy(positions),\r\n        perPositionHeight: true, //真实高度\r\n      }),\r\n\r\n      // attributes: { color: color }\r\n    });\r\n    PrimitiveCollection.add(new Cesium.Primitive({\r\n      geometryInstances: [polygonInstance],\r\n      appearance: new Cesium.MaterialAppearance({\r\n        material: new Cesium.Material(materialOption)\r\n      })\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * 带高程\r\n   * @param {*} PrimitiveCollection PrimitiveCollection\r\n   * @param {*} coordinates 经度，纬度和高度值的列表。\r\n   * @param {*} width 点宽10\r\n   * @param {*} color 颜色 \"#FF0000\"\r\n   * @param {*} alpha 透明度\r\n   */\r\n  static simpleVolumeBox(\r\n    PrimitiveCollection,\r\n    coordinates,\r\n    width,\r\n    color,\r\n    alpha\r\n  ) {\r\n    PrimitiveCollection.add({\r\n      show: true,\r\n      position: Cesium.Cartesian3.ZERO,\r\n      pixelSize: width,\r\n      color: Cesium.ColorGeometryInstanceAttribute.fromColor(\r\n        Cesium.Color.fromCssColorString(color).withAlpha(alpha)\r\n      ), //color  必须设置 不然没有效果,\r\n      outlineColor: Cesium.Color.TRANSPARENT,\r\n      outlineWidth: 0.0,\r\n      id: undefined\r\n    });\r\n  }\r\n\r\n  /** \r\n   *            // 创建材质，在MaterialAppearance中若不添加基础材质，模型将会透明\r\n              var material = new Cesium.Material.fromType(\"Color\");\r\n                  material.uniforms.color =  Cesium.Color.WHITE;\r\n              // 自定义材质\r\n              const aper = new Cesium.MaterialAppearance({\r\n                  material: material,\r\n                  translucent: true,\r\n                  closed: true,\r\n              })\r\n                     // 加载模型\r\n              var p = viewer.scene.primitives.add(\r\n                  new Cesium.Primitive({\r\n                      geometryInstances: [instance, instance2],\r\n                      appearance: aper,\r\n                      releaseGeometryInstances: false,\r\n                      compressVertices: false,\r\n                  })\r\n              )\r\n\r\n// 任意几何体\r\n              var instance = new Cesium.GeometryInstance({\r\n  geometry : new Cesium.RectangleGeometry({\r\n    rectangle : Cesium.Rectangle.fromDegrees(-100.0, 20.0, -90.0, 30.0),\r\n    vertexFormat : Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT\r\n  })\r\n});\r\n\r\nscene.primitives.add(new Cesium.Primitive({\r\n  geometryInstances : instance,\r\n  appearance : new Cesium.EllipsoidSurfaceAppearance({\r\n    material : Cesium.Material.fromType('Stripe')\r\n  })\r\n}));\r\n\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param {*} PrimitiveCollection PrimitiveCollection\r\n   * @param {*} coordinates 经度和纬度值的列表。值交替显示[经度，纬度，经度，纬度...]。\r\n   * @param {*} width 线宽\r\n   * @param {*} color 颜色\r\n   * @param {*} alpha 透明度\r\n   */\r\n  static simpleLineByPrimitive(\r\n    PrimitiveCollection,\r\n    coordinates,\r\n    width,\r\n    color,\r\n    alpha\r\n  ) {\r\n    let boolAlpha = (alpha != null)\r\n    let linePrimitive = new Cesium.Primitive({\r\n      geometryInstances: new Cesium.GeometryInstance({\r\n        geometry: new Cesium.PolylineGeometry({\r\n          positions: Cesium.Cartesian3.fromDegreesArray(coordinates),\r\n          width: width, //线宽\r\n          vertexFormat: Cesium.PolylineColorAppearance.VERTEX_FORMAT,\r\n        }),\r\n        attributes: {\r\n          color: Cesium.ColorGeometryInstanceAttribute.fromColor(\r\n            Cesium.Color.fromCssColorString(color).withAlpha(alpha)\r\n          ), //color  必须设置 不然没有效果\r\n        },\r\n      }),\r\n      appearance: new Cesium.PolylineColorAppearance({\r\n        translucent: boolAlpha,\r\n      }),\r\n    })\r\n\r\n    // return linePrimitive\r\n    PrimitiveCollection.add(linePrimitive)\r\n  }\r\n\r\n  /**\r\n   * 带高程\r\n   * @param {*} PrimitiveCollection PrimitiveCollection\r\n   * @param {*} coordinates 经度，纬度和高度值的列表。值交替显示[经度，纬度，高度，经度，纬度，高度...]。\r\n   * @param {*} width 线宽\r\n   * @param {*} color 颜色 \"#FF0000\"\r\n   * @param {*} alpha 透明度\r\n   */\r\n  static simpleLineHeightByPrimitive(\r\n    PrimitiveCollection,\r\n    positions,\r\n    coordinates,\r\n    width,\r\n    color,\r\n    alpha\r\n  ) {\r\n    let boolAlpha = alpha || false\r\n    let linePrimitive = new Cesium.Primitive({\r\n      geometryInstances: new Cesium.GeometryInstance({\r\n        geometry: new Cesium.PolylineGeometry({\r\n          positions: positions || Cesium.Cartesian3.fromDegreesArrayHeights(coordinates),\r\n          width: width, //线宽\r\n          vertexFormat: Cesium.PolylineColorAppearance.VERTEX_FORMAT,\r\n        }),\r\n        attributes: {\r\n          color: Cesium.ColorGeometryInstanceAttribute.fromColor(\r\n            Cesium.Color.fromCssColorString(color).withAlpha(alpha)\r\n          ), //color  必须设置 不然没有效果\r\n        },\r\n      }),\r\n      appearance: new Cesium.PolylineColorAppearance({\r\n        translucent: boolAlpha,\r\n      }),\r\n    })\r\n\r\n    // return linePrimitive\r\n    PrimitiveCollection.add(linePrimitive)\r\n  }\r\n\r\n  /** \r\n   *            // 创建材质，在MaterialAppearance中若不添加基础材质，模型将会透明\r\n              var material = new Cesium.Material.fromType(\"Color\");\r\n                  material.uniforms.color =  Cesium.Color.WHITE;\r\n              // 自定义材质\r\n              const aper = new Cesium.MaterialAppearance({\r\n                  material: material,\r\n                  translucent: true,\r\n                  closed: true,\r\n              })\r\n                     // 加载模型\r\n              var p = viewer.scene.primitives.add(\r\n                  new Cesium.Primitive({\r\n                      geometryInstances: [instance, instance2],\r\n                      appearance: aper,\r\n                      releaseGeometryInstances: false,\r\n                      compressVertices: false,\r\n                  })\r\n              )\r\n   */\r\n\r\n}\r\n\r\n// 贴地 模型\r\n// classificationType: Cesium.ClassificationType.BOTH,\r\n// entity.polyline.clampToGround=true;\r\n\r\n// https://www.jianshu.com/p/a983160234ad 材质\r\nexport {\r\n  RenderSimple\r\n}","import { MouseListen } from '../../core/control/mouse/MouseListen.js'\r\nimport { ClippingPlanesByGeom } from '../primitives/clipPlanes/ClippingPlanesByGeom.js'\r\nimport { RenderSimple } from '../renderGeom/RenderSimple.js'\r\nimport { LocalAndWorldTransform } from '../translate/LocalAndWorldTransform.js'\r\nimport { ComputationalGeom } from '../../core/math/ComputationalGeom.js'\r\n\r\nclass HoleDraw extends MouseListen {\r\n\r\n  /**\r\n   * 基础绘制类  点线面 （贴地点，贴地线,贴地面）\r\n   * 自行继承组织点线面切面等几何图形\r\n   * 单独考虑地形 3dtiles glb切面生成 不支持单切面\r\n   * @param {*} viewer\r\n   * @param {*} holeBottomImgPath 下表面材质\r\n   *\r\n   */\r\n  constructor(viewer, holeBottomImgPath) {\r\n    super(viewer)\r\n\r\n    // 绘制开关  支持种类\r\n    this.holeTerrainDrawBool = false\r\n    this.hole3DtilesDrawBool = false\r\n    this.pointDensity = 1 //默认不插值 无边墙时不影响\r\n    // this.hole3DtilesUrl = \"https://assets.cesium.com/96188/tileset.json?v=13\"\r\n    this.holeBottomImgPath =\r\n      holeBottomImgPath || './work/img/excavate_bottom_min.jpg'\r\n    this.holeBottomDepth = -50 //开挖深度\r\n  }\r\n\r\n  stateStart() {\r\n    super.stateStart()\r\n\r\n    // 总绘制\r\n    this.PrimitiveAll =\r\n      this.PrimitiveAll ||\r\n      this.viewer.scene.primitives.add(new Cesium.PrimitiveCollection())\r\n\r\n    // 空洞相关\r\n    this.globe = this.viewer.scene.globe\r\n\r\n    //// 绘制方向\r\n    this.polygonDirectionStart = null //初始顺逆绘制方向\r\n    this.polygonDirection = null //实时记录\r\n\r\n    // 墙面\r\n    this._polygonPrimitives = this.PrimitiveAll.add(\r\n      new Cesium.PrimitiveCollection()\r\n    ) //真实纯粹多面  非顺序三角面（综合）\r\n    this._holeWallPositions = [] // 单次绘制插值数组\r\n    this._holeDownPositions = null // 单次总绘制数组总底面\r\n    // test!!!\r\n    // this._pointPrimitives = this.PrimitiveAll.add(new Cesium.PointPrimitiveCollection()) //默认贴地\r\n\r\n    this.clippingPlanesModels = []\r\n  }\r\n\r\n  /**\r\n   * 绘制点  多单点  双击一批次\r\n   */\r\n  holeTerrainDrawStart() {\r\n    this.holeTerrainDrawBool = true\r\n    this.clippingPlanesModels.push(this.globe)\r\n  }\r\n  hole3DtilesDrawStart(hole3DtilesUrl) {\r\n    this.hole3DtilesDrawBool = true\r\n    hole3DtilesUrl = 'https://assets.cesium.com/354759/tileset.json?v=1'\r\n    this.viewer.scene.primitives._primitives.forEach((primitive) => {\r\n      if (primitive._url == hole3DtilesUrl) {\r\n        this.tileset = primitive\r\n        this.localAndWorldTransform = new LocalAndWorldTransform(\r\n          this.tileset.boundingSphere.center\r\n        )\r\n        this.clippingPlanesModels.push(this.tileset)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 监听绘制过程   确认绘制方向\r\n  set click_MOUSE_MOVE(value) {\r\n    if (this._clickPositions.length == 3) {\r\n      this.polygonDirection = ComputationalGeom.polygonDirectionSet(\r\n        this._clickPositions,\r\n        this.polygonDirection\r\n      )\r\n      this.polygonDirectionStart = this.polygonDirection //初始旋转\r\n      // this.renderTerrainPlanes() //初始挖坑\r\n    }\r\n    if (this._clickPositions.length > 3) {\r\n      this.polygonDirection = ComputationalGeom.polygonDirectionSet(\r\n        this._clickPositions,\r\n        this.polygonDirection\r\n      )\r\n    }\r\n    if (this.holeTerrainDrawBool) {\r\n    }\r\n    if (this.hole3DtilesDrawBool) {\r\n    }\r\n  }\r\n\r\n  set click_LEFT_CLICK(value) {\r\n    if (this.singleLeftClickBool()) {\r\n\r\n      // let clickScene = this._clickPositions[this._clickPositions.length - 1]\r\n      if (this.holeTerrainDrawBool) {\r\n        if (this._clickPositions.length == 1) {\r\n\r\n          // 清除空洞\r\n          this.viewer.scene.globe.clippingPlanes &&\r\n            (this.viewer.scene.globe.clippingPlanes = null)\r\n        }\r\n      }\r\n      if (this.hole3DtilesDrawBool) {\r\n        if (this._clickPositions.length == 1) {\r\n\r\n          // 清除空洞\r\n          // this.tileset.clippingPlanes && (this.tileset.clippingPlanes = new Cesium.ClippingPlaneCollection())\r\n          this.tileset &&\r\n            this.tileset.clippingPlanes &&\r\n            this.tileset.clippingPlanes.destroy()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  set click_LEFT_DOUBLE_CLICK(value) {\r\n\r\n    // let clickScene = this._clickPositions[this._clickPositions.length - 1]\r\n    let pointsLength = this._clickPositions.length\r\n\r\n    // 三点以上绘制\r\n    if (pointsLength > 2) {\r\n\r\n      // 清除原有\r\n      this._polygonPrimitives.removeAll()\r\n    }\r\n\r\n    if (this.holeTerrainDrawBool) {\r\n\r\n      // 注意后续异步this._clickPositions已重置 深拷    this._clickPositions为传入点击数组\r\n      let pointsLength = this._clickPositions.length\r\n\r\n      let holeBottomAltitude =\r\n        Cesium.Ellipsoid.WGS84.cartesianToCartographic(\r\n          this._clickPositionsStatic[0]\r\n        ).height + this.holeBottomDepth\r\n\r\n      // 三点以上绘制\r\n      if (pointsLength > 2) {\r\n\r\n        //1、 获取墙面和底面 绘制墙面\r\n        //底面集合\r\n        this._holeDownPositions = []\r\n        for (\r\n          let index = 0;\r\n          index < this._clickPositionsStatic.length;\r\n          index++\r\n        ) {\r\n\r\n          // 下个表面和墙面点集合\r\n          let cartographic = Cesium.Ellipsoid.WGS84.cartesianToCartographic(\r\n            this._clickPositionsStatic[index]\r\n          )\r\n          cartographic.height = holeBottomAltitude\r\n          this._holeDownPositions.push(\r\n            Cesium.Cartesian3.fromRadians(\r\n              cartographic.longitude,\r\n              cartographic.latitude,\r\n              cartographic.height\r\n            )\r\n          )\r\n        }\r\n\r\n        // 墙面集合\r\n        for (\r\n          let index = 0;\r\n          index < this._clickPositionsStatic.length;\r\n          index++\r\n        ) {\r\n          let nextIndex = (index + 1) % pointsLength\r\n          let positionsTwo = [\r\n            this._clickPositionsStatic[index],\r\n            this._clickPositionsStatic[nextIndex],\r\n          ]\r\n\r\n          // console.log('开始绘制两点', positionsTwo)\r\n          let positionsUpFull = ComputationalGeom.getLerpByPoints(\r\n            positionsTwo,\r\n            this.pointDensity\r\n          ) //插值单次集合 插值密度1/m\r\n\r\n          //获取上边表面点集合\r\n          let promise0 = this.viewer.scene\r\n            .clampToHeightMostDetailed(\r\n              positionsUpFull\r\n\r\n              // [window.glbTest] //屏蔽的模型\r\n            )\r\n            .then((updatedCartesians) => {\r\n\r\n              //上边表面点集合\r\n              // console.log('上边表面点集合', updatedCartesians)\r\n              //剔除空值 某些位置获取不到表面高度undefined\r\n              for (let index = 0; index < updatedCartesians.length; index++) {\r\n                let updatedCartesian = updatedCartesians[index]\r\n                ;(updatedCartesian == undefined || updatedCartesian == null) &&\r\n                  updatedCartesians.splice(index, 1)\r\n              }\r\n\r\n              // 墙面集合\r\n              updatedCartesians.push(\r\n                this._holeDownPositions[nextIndex],\r\n                this._holeDownPositions[index]\r\n              ) //拼接  注意翻转 绘制顺序\r\n              RenderSimple.simplePolygonByPrimitiveInstance(\r\n                this._polygonPrimitives,\r\n                updatedCartesians,\r\n                Cesium.Color.fromBytes(161, 169, 173, 255)\r\n              )\r\n\r\n              //最后一面计算后开挖   TODO无法确认全部完成\r\n              if (index == this._clickPositionsStatic.length - 1) {\r\n                ClippingPlanesByGeom.setClippingPlanesSimple(\r\n                  this.clippingPlanesModels,\r\n                  this._clickPositionsStatic,\r\n                  this.polygonDirectionStart\r\n                )\r\n              }\r\n            })\r\n        }\r\n        RenderSimple.simplePolygonByPrimitiveInstance(\r\n          this._polygonPrimitives,\r\n          this._holeDownPositions,\r\n          null,\r\n          this.holeBottomImgPath\r\n        ) // 绘制底面\r\n      }\r\n    }\r\n\r\n    if (this.hole3DtilesDrawBool) {\r\n      if (pointsLength > 2) {\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAll() {\r\n    super.removeAll()\r\n    this.PrimitiveAll.removeAll()\r\n\r\n    // 鼠标移动指示\r\n    // this._mouseMovePointPrimitivesCollection.remove(this._mouseMovePointPrimitives)\r\n    this._mouseMovePointPrimitives = null\r\n\r\n    // 清除空洞\r\n    this.viewer.scene.globe.clippingPlanes = null\r\n  }\r\n}\r\n\r\nexport { HoleDraw }\r\n","class RenderInstance {\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  /**\r\n   * 添加单模型\r\n   * @param {*} url \r\n   * @param {*} modelMatrix \r\n   * @param {*} primitiveModelCollection  要添加的渲染集合\r\n   * @param {*} modelPosition 混合样式 动画设置 \r\n   */\r\n  PolylineVolumeGeometryInstance(id, polylinePositions, PrimitiveCollection, shapePositions) {\r\n    let polylinevolumeinstance = new Cesium.GeometryInstance({\r\n      geometry: new Cesium.PolylineVolumeGeometry({\r\n        vertexFormat: Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\r\n        polylinePositions: polylinePositions,\r\n\r\n        // Cesium.Cartesian3.fromDegreesArrayHeights(\r\n        //   [\r\n        //     90, 35, 50000,\r\n        //     110, 35, 50000\r\n        //   ]),\r\n        shapePositions: shapePositions,\r\n\r\n        // cornerType: Cesium.CornerType.MITERED\r\n      }),\r\n\r\n      id: id\r\n    });\r\n\r\n    PrimitiveCollection.add(new Cesium.Primitive({\r\n      geometryInstances: [polylinevolumeinstance],\r\n      appearance: new Cesium.MaterialAppearance({\r\n        material: Cesium.Material.fromType('Color', {\r\n          color: Cesium.Color.fromAlpha(Cesium.Color.fromCssColorString('#79D9FF'), 0.4)\r\n        }),\r\n\r\n        // faceForward: true\r\n        flat: true\r\n      }) //PolylineColorAppearance/PolylineMaterialAppearance请区分使用场景\r\n    }));\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  \r\n  RenderInstance\r\n}","/**\r\n * \r\n */\r\nclass RenderGlb {\r\n\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  /**\r\n   * 添加单模型\r\n   * @param {*} url \r\n   * @param {*} modelMatrix \r\n   * @param {*} primitiveModelCollection  要添加的渲染集合\r\n   * @param {*} modelPosition 混合样式 动画设置 \r\n   */\r\n  renderSimpleGlb(url, modelMatrix, primitiveModelCollection, modelPosition) {\r\n    if (!primitiveModelCollection) {\r\n      primitiveModelCollection = this.viewer.scene.primitives\r\n    }\r\n\r\n    // scene.primitives.removeAll(); // Remove previous model\r\n    let model = primitiveModelCollection.add(Cesium.Model.fromGltf({\r\n      url: url,\r\n      modelMatrix: modelMatrix,\r\n\r\n      // minimumPixelSize: 128\r\n    }));\r\n\r\n    // parentNode节点处理\r\n\r\n    // 新模型非位置的其他参数设置\r\n    if (!modelPosition) {\r\n      return false\r\n    }\r\n    return model.readyPromise.then((model) => {\r\n      model.color = modelPosition.color; //模型透明度包含在Cesium.Color的alpha内\r\n      model.colorBlendMode = Cesium.ColorBlendMode.MIX; //混合方式\r\n      model.colorBlendAmount = modelPosition.colorBlendAmount; //mix模式浓度 默认0.5\r\n      // 边框\r\n      model.silhouetteColor = modelPosition.silhouetteColor;\r\n      model.silhouetteSize = modelPosition.silhouetteSize;\r\n\r\n      // 动画开启\r\n      // model.activeAnimations.addAll({\r\n      //   speedup: 0.5,\r\n      //   loop: Cesium.ModelAnimationLoop.REPEAT\r\n      // });\r\n\r\n      let camera = this.viewer.camera;\r\n\r\n      // window.modelTest = model//调试\r\n      // // 跟踪模型\r\n      // // let controller = this.viewer.scene.screenSpaceCameraController;\r\n      // let r = 2.0 * Math.max(model.boundingSphere.radius, camera.frustum.near);\r\n      // // controller.minimumZoomDistance = r * 0.5;//镜头最近距离\r\n\r\n      // let center = Cesium.Matrix4.multiplyByPoint(model.modelMatrix, model.boundingSphere.center, new Cesium.Cartesian3());\r\n      // let heading = Cesium.Math.toRadians(230.0);\r\n      // let pitch = Cesium.Math.toRadians(-20.0);\r\n      // // camera.lookAt(center, new Cesium.HeadingPitchRange(heading, pitch, r * 2.0)); //跟踪模型中心\r\n      // // camera.lookAt(center); //跟踪模型中心\r\n\r\n      // // camera.lookAtTransform(Cesium.Matrix4.IDENTITY) //单位矩阵，恢复跟踪地球中心\r\n    })\r\n\r\n  }\r\n\r\n  // \r\n  /**\r\n   * 笛卡尔添加模型\r\n   * @param {*} viewer \r\n   * @param {*} url \r\n   * @param {*} position \r\n   * @param {*} diriction \r\n   * @param {*} scale 尺寸\r\n   */\r\n  static renderGlbPositionGraphic(viewer, url, position, diriction, scale) {\r\n\r\n    let modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(position);\r\n\r\n    // // let modelMatrix = Cesium.Transforms.headingPitchRollToFixedFrame(\r\n    // //   position,\r\n    // //   new Cesium.HeadingPitchRoll(heading, pitch, roll)\r\n    // // );\r\n\r\n    // 尺寸\r\n    // let scaleXYZ = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(modelScaleArray[1], modelScaleArray[0], modelScaleArray[2]));\r\n    // Cesium.Matrix4.multiply(modelMatrix, scaleXYZ, modelMatrix);\r\n    // 方向\r\n\r\n    let model = Cesium.Model.fromGltf({\r\n      url: url,\r\n      modelMatrix: modelMatrix,\r\n      scale: scale\r\n\r\n      // minimumPixelSize: 128\r\n    })\r\n    viewer.scene.primitives.add(model)\r\n\r\n    return model\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  RenderGlb\r\n}","class renderModelByprimitive{}\r\n\r\nexport {renderModelByprimitive}","/**\r\n * 分块请求渲染几何及模型\r\n * 几何集中渲染 模型实例化渲染   \r\n * 状态管理机制\r\n */\r\n//TODO 加载几何 相机中心改为视锥体？？？\r\nclass CesiumPrimitivesProvider {\r\n\r\n  /**\r\n   * 分割与取图块分离!!!  切割坐标与OSM一致 经纬度计算（弧度）\r\n   * 初始化视图和相机    每次新加载需要setParams来切瓦块\r\n   * @param {Object} viewer\r\n   *\r\n   */\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n    this.camera = viewer.scene.camera;\r\n  }\r\n\r\n  /**\r\n   * 设置切片和加载参数初始化切片状态\r\n   * @param {*} levZ 瓦块级别\r\n   * @param {Number} tilesCountAdd 请求瓦片一侧添加行列数0 1 2\r\n   * @param {Number} requestHeight 开始加载和判定高度\r\n   * @param {Array} renderArrayHeight 渲染距离范围 [最小,最大]\r\n   * @param {*} startDlat 不确定levZ通过单个瓦块内最大纬度差来确定级别   弧度  \r\n   */\r\n  setParams(levZ, tilesCountAdd, requestHeight, renderArrayHeight, startDlat) {\r\n    this.tilesCountAdd = tilesCountAdd;\r\n    this.tilesCount = 2 * this.tilesCountAdd + 1; //每行列数\r\n    this.tilesSize = Math.pow(this.tilesCount, 2); //每次渲染瓦块数\r\n    this.requestHeight = requestHeight;\r\n    this.renderArrayHeight = renderArrayHeight;\r\n    if (levZ) {\r\n      this.levZ = levZ;\r\n    } else if (startDlat) {\r\n\r\n      //根据单片纬度差求级别  向下取整\r\n      this.levZ = Math.floor(Math.log(Math.PI / startDlat) / Math.log(2));\r\n    }\r\n\r\n    // 瓦片跨越步长  纬度差\r\n    this.dlat = Math.PI / Math.pow(2, this.levZ);\r\n    this.dlon = 2 * this.dlat;\r\n\r\n    // 初始设置清空  新的瓦片组 归零\r\n    this.row = 0;\r\n    this.col = 0;\r\n    this.tilesIdArraysOld = [];\r\n\r\n    // 待添加和删除\r\n    this.tilesMapWillAdd = new Map(); //id position\r\n    this.tilesSetWillDelete = new Set(); //id\r\n    // 已渲染的\r\n    this.tilesMapRenderNow = new Map(); //{经纬度标号， position，primative，}\r\n  }\r\n\r\n  /**\r\n   * 设置监听（包含校准参数） 初始化具体业务\r\n   * @param {Function} featureFunction   分块内业务  空为测试范围块\r\n   */\r\n  startListener(featureFunction) {\r\n\r\n    // 外部业务所需参数 TODO cesiumParams endRender改为全局\r\n    this.cesiumParams = {\r\n      viewer: this.viewer,\r\n      camera: this.camera,\r\n      endRender: false,\r\n    };\r\n\r\n    // 业务初始化\r\n    this.featureFunction = featureFunction;\r\n\r\n    //监听  移动结束（防止移动加载卡顿）this.removeEnd = this.camera.moveEnd.addEventListener\r\n    //监听  比率变化（平滑大数据量卡顿）this.removeChanged = this.camera.changed.addEventListener\r\n    // \r\n    if (!featureFunction) {\r\n\r\n      // 业务为校准方法\r\n      this.featureFunction = this.testCameraBox;\r\n    }\r\n\r\n    // console.log(\"------------开始监听----------\", this.removeEnd)\r\n    this.batchRender(); //初次执行再绑定监听  防止范围内直接加载数据不移动相机\r\n    this.removeChanged = this.camera.changed.addEventListener(() => {\r\n      this.batchRender();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 移除监听\r\n   */\r\n  endListener() {\r\n\r\n    // this.removeEnd();\r\n    this.removeChanged();\r\n\r\n    // 销毁图块状态和渲染\r\n    this.destoryTiles();\r\n\r\n    // console.log(\"------------结束监听----------\", this.removeEnd);\r\n  }\r\n\r\n  /**\r\n   * 销毁切片\r\n   */\r\n  destoryTiles() {\r\n\r\n    // 未请求待渲染 清除\r\n    this.tilesMapWillAdd.clear();\r\n\r\n    // 已请求待渲染 停止继续渲染\r\n    this.cesiumParams.endRender = true;\r\n\r\n    this.tilesIdArraysOld = [];\r\n    this.tilesMapRenderNow.forEach((primitiveTileDestory, idDestory) => {\r\n      {\r\n        debugger\r\n\r\n        // 去除几何\r\n        this.viewer.scene.primitives.remove(primitiveTileDestory);\r\n\r\n        // 更新渲染状态\r\n        this.tilesMapRenderNow.delete(idDestory);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 校准参数\r\n   */\r\n  calibration() {\r\n    let cameraPosition = this.camera.positionCartographic;\r\n\r\n    // 图块组变化后渲染\r\n    if (cameraPosition.height < this.requestHeight) {\r\n      if (\r\n        this.getTilesArrays(cameraPosition.longitude, cameraPosition.latitude)\r\n      ) {\r\n\r\n        //渲染待添加集合内几何数据\r\n        this.tilesMapWillAdd.forEach((positionArrays, id) => {\r\n\r\n          // 更新待添加状态\r\n          this.tilesMapWillAdd.delete(id);\r\n\r\n          // 测试  换成具体图形业务\r\n          this.testCameraBox(positionArrays, id);\r\n        });\r\n\r\n        // 删除范围外图块\r\n        this.tilesSetWillDelete.forEach((tileDelete) => {\r\n\r\n          // 更新待删除状态\r\n          this.tilesSetWillDelete.delete(tileDelete);\r\n\r\n          // 去除几何\r\n          this.viewer.scene.primitives.remove(\r\n            this.tilesMapRenderNow.get(tileDelete)\r\n          );\r\n\r\n          // 更新渲染状态\r\n          this.tilesMapRenderNow.delete(tileDelete);\r\n        });\r\n      }\r\n    }\r\n\r\n    // else {  TODO\r\n    //   //离开范围销毁渲染内容 不需要判断 空不循环\r\n    //   this.destoryTiles();\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * 校准中 测试图形  无异步问题  不需要设置异步后硬质渲染\r\n   * @param {Array} positionArrays  图块定位数组\r\n   * @param {String} id 图块编号  行_列\r\n   */\r\n\r\n  testCameraBox(\r\n    cesiumParams,\r\n    tilesMapRenderNow,\r\n    positionArrays,\r\n    id,\r\n    renderArrayHeight\r\n  ) {\r\n    let viewer = cesiumParams.viewer;\r\n\r\n    // 几何\r\n    let primitiveTile = null;\r\n    let greenPolygonInstance = new Cesium.GeometryInstance({\r\n      geometry: Cesium.PolygonGeometry.fromPositions({\r\n        extrudedHeight: 10.0,\r\n        positions: Cesium.Cartesian3.fromDegreesArray(positionArrays),\r\n        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,\r\n      }),\r\n      attributes: {\r\n        distanceDisplayCondition: new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(\r\n          renderArrayHeight[0],\r\n          renderArrayHeight[1]\r\n        ),\r\n        color: Cesium.ColorGeometryInstanceAttribute.fromColor(\r\n          Cesium.Color.fromRandom({\r\n            alpha: 0.5,\r\n          })\r\n        ),\r\n      },\r\n    });\r\n\r\n    primitiveTile = new Cesium.Primitive({\r\n      geometryInstances: [greenPolygonInstance], //绑定一起渲染，效率更高\r\n      appearance: new Cesium.PerInstanceColorAppearance({\r\n        closed: true,\r\n        translucent: false,\r\n      }),\r\n    });\r\n    viewer.scene.primitives.add(primitiveTile);\r\n\r\n    // 更新渲染状态\r\n    tilesMapRenderNow.set(id, primitiveTile);\r\n  }\r\n\r\n  /**\r\n   * 计算切片 2:1多叉   切片状态管理\r\n   * 通过经纬度获取数据范围\r\n   * @param {*} lon\r\n   * @param {*} lat\r\n   */\r\n  getTilesArrays(lon, lat) {\r\n\r\n    // osm  以-180->180(x) 90->-90(y)为坐标轴展开地图，以左上角为原点的经纬度值\r\n    let xLon = Math.PI + lon;\r\n    let yLat = Math.PI / 2 - lat;\r\n    let x = xLon / this.dlon; //levZ级OSM编号 小数 不能直接求余\r\n    let y = yLat / this.dlat;\r\n\r\n    //levZ级OSM编号\r\n    let rowNew = Math.floor(y);\r\n    let colNew = Math.floor(x); //向下取整\r\n    let rowChange = rowNew - this.row; //增加的编号 +右移动\r\n    let colChange = colNew - this.col; //+下移动\r\n    if (rowChange == 0 && colChange == 0) {\r\n      return false; //图块无变化\r\n    }\r\n\r\n    //取新图块组\r\n    let tilesArrays = [];\r\n    let tilesIdArrays = [];\r\n\r\n    let PI = Math.PI;\r\n    let cc2rd = 180 / PI;\r\n    for (let i = -this.tilesCountAdd; i <= this.tilesCountAdd; i++) {\r\n      for (let j = -this.tilesCountAdd; j <= this.tilesCountAdd; j++) {\r\n\r\n        // key图块行列号 value 图块四角坐标 [列 行号字符串，[经度，纬度]]\r\n        let tile = { id: colNew + j + \" \" + (rowNew + i) };\r\n        tile.positionArrays = [\r\n          ((colNew + j) * this.dlon - PI) * cc2rd, //\r\n          (PI / 2 - (rowNew + i) * this.dlat) * cc2rd,\r\n          ((colNew + j + 1) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i) * this.dlat) * cc2rd,\r\n          ((colNew + j + 1) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i + 1) * this.dlat) * cc2rd,\r\n          ((colNew + j) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i + 1) * this.dlat) * cc2rd,\r\n        ];\r\n\r\n        // tile.geom = null;\r\n        tilesArrays.push(tile);\r\n        tilesIdArrays.push(tile.id);\r\n      }\r\n    }\r\n\r\n    //最新一次的差集 旧集合不含有新集合的部分 删除  array\r\n    let tilesArraysDeleteNew = this.tilesIdArraysOld.filter(\r\n      (id) => !new Set(tilesIdArrays).has(id)\r\n    );\r\n\r\n    //最新一次的差集差集 新集合 旧的没有  添加  附带坐标   array包含id等\r\n    let tilesArraysAddNew = tilesArrays.filter(\r\n      (item) => !new Set(this.tilesIdArraysOld).has(item.id)\r\n    );\r\n\r\n    // 更新状态\r\n    if (this.tilesIdArraysOld) {\r\n      for (let i = 0; i < tilesArraysDeleteNew.length; i++) {\r\n        this.tilesSetWillDelete.add(tilesArraysDeleteNew[i]);\r\n        this.tilesMapWillAdd.delete(tilesArraysDeleteNew[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < tilesArraysAddNew.length; i++) {\r\n      this.tilesMapWillAdd.set(\r\n        tilesArraysAddNew[i].id,\r\n        tilesArraysAddNew[i].positionArrays\r\n      );\r\n\r\n      // this.tilesSetWillDelete.delete(tilesArraysAddNew[i].id);\r\n    }\r\n\r\n    // console.log(\"旧图块id集合\", this.tilesIdArraysOld);\r\n    // console.log(\"新图块id集合\", tilesIdArrays);\r\n    // console.log(\"新图块集合\", tilesArrays);\r\n    // console.log(\"新图块待删除队列\", this.tilesSetWillDelete);\r\n    // console.log(\"新图块待添加队列\", this.tilesMapWillAdd);\r\n    //更新前图块ID\r\n    // 添加 tilesIdArrays.slice()\r\n    // this.tilesIdArraysOld.push(...tilesIdArrays);//删不干净考虑\r\n    this.tilesIdArraysOld = tilesIdArrays.slice();\r\n    this.row = Math.floor(y);\r\n    this.col = Math.floor(x);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 批量加载删除\r\n   * @param {*} WFSUrl\r\n   */\r\n  batchRender() {\r\n\r\n    // 图块中心点  TODO 视线中心\r\n    let cameraPosition = this.camera.positionCartographic;\r\n\r\n    // 图块组变化后渲染\r\n    if (\r\n      cameraPosition.height < this.requestHeight &&\r\n      this.getTilesArrays(cameraPosition.longitude, cameraPosition.latitude) //切片计算\r\n    ) {\r\n\r\n      //1渲染待添加集合内几何数据\r\n      this.tilesMapWillAdd.forEach((positionArrays, id) => {\r\n\r\n        // 更新待添加状态\r\n        this.tilesMapWillAdd.delete(id);\r\n        this.featureFunction(\r\n          this.cesiumParams,\r\n          this.tilesMapRenderNow,\r\n          positionArrays,\r\n          id,\r\n          this.renderArrayHeight\r\n        );\r\n      });\r\n\r\n      // 2删除范围外图块\r\n      this.tilesSetWillDelete.forEach((tileDelete) => {\r\n\r\n        // 删除已经渲染的，防止删除已请求但未返回进行渲染\r\n        if (this.tilesMapRenderNow.get(tileDelete)) {\r\n\r\n          // 去除几何\r\n          this.viewer.scene.primitives.remove(\r\n            this.tilesMapRenderNow.get(tileDelete)\r\n          );\r\n\r\n          // 更新待删除状态\r\n          this.tilesSetWillDelete.delete(tileDelete);\r\n\r\n          // 更新渲染状态\r\n          this.tilesMapRenderNow.delete(tileDelete);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { CesiumPrimitivesProvider };","/**\r\n * 通用三维场景接口（变种octree结合geohash场景树）\r\n * \r\n * 1、子节点内传递函数和数据更新场景\r\n * \r\n * 2、数据规范化为点\r\n * \r\n * 3、不同三维级别需要参数、数据分层抽稀（附带通用数据库脚本）\r\n * \r\n */\r\nclass Universal3DSceneInterface {\r\n\r\n  /**\r\n   * 分割与取图块分离!!!  切割坐标与OSM一致 经纬度计算（弧度）\r\n   * 初始化视图和相机    每次新加载需要setParams来切瓦块\r\n   * @param {Object} viewer\r\n   *\r\n   */\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n    this.camera = viewer.scene.camera;\r\n  }\r\n\r\n  /**\r\n   * 设置切片和加载参数初始化切片状态\r\n   * @param {*} levZ 瓦块级别\r\n   * @param {Number} tilesCountAdd 请求瓦片一侧添加行列数0 1 2\r\n   * @param {Number} requestHeight 开始加载和判定高度\r\n   * @param {Array} renderArrayHeight 渲染距离范围 [最小,最大]\r\n   * @param {*} startDlat 不确定levZ通过单个瓦块内最大纬度差来确定级别   弧度  \r\n   */\r\n  setParams(levZ, tilesCountAdd, requestHeight, renderArrayHeight, startDlat) {\r\n    this.tilesCountAdd = tilesCountAdd;\r\n    this.tilesCount = 2 * this.tilesCountAdd + 1; //每行列数\r\n    this.tilesSize = Math.pow(this.tilesCount, 2); //每次渲染瓦块数\r\n    this.requestHeight = requestHeight;\r\n    this.renderArrayHeight = renderArrayHeight;\r\n    if (levZ) {\r\n      this.levZ = levZ;\r\n    } else if (startDlat) {\r\n\r\n      //根据单片纬度差求级别  向下取整\r\n      this.levZ = Math.floor(Math.log(Math.PI / startDlat) / Math.log(2));\r\n    }\r\n\r\n    // 瓦片跨越步长  纬度差\r\n    this.dlat = Math.PI / Math.pow(2, this.levZ);\r\n    this.dlon = 2 * this.dlat;\r\n\r\n    // 初始设置清空  新的瓦片组 归零\r\n    this.row = 0;\r\n    this.col = 0;\r\n    this.tilesIdArraysOld = [];\r\n\r\n    // 待添加和删除\r\n    this.tilesMapWillAdd = new Map(); //id position\r\n    this.tilesSetWillDelete = new Set(); //id\r\n    // 已渲染的\r\n    this.tilesMapRenderNow = new Map(); //{经纬度标号， position，primative，}\r\n  }\r\n\r\n  /**\r\n   * 设置监听（包含校准参数） 初始化具体业务\r\n   * @param {Function} featureFunction   分块内业务  空为测试范围块\r\n   */\r\n  startListener(featureFunction) {\r\n\r\n    // 外部业务所需参数 TODO cesiumParams endRender改为全局\r\n    this.cesiumParams = {\r\n      viewer: this.viewer,\r\n      camera: this.camera,\r\n      endRender: false,\r\n    };\r\n\r\n    // 业务初始化\r\n    this.featureFunction = featureFunction;\r\n\r\n    //监听  移动结束（防止移动加载卡顿）this.removeEnd = this.camera.moveEnd.addEventListener\r\n    //监听  比率变化（平滑大数据量卡顿）this.removeChanged = this.camera.changed.addEventListener\r\n    // \r\n    if (!featureFunction) {\r\n\r\n      // 业务为校准方法\r\n      this.featureFunction = this.testCameraBox;\r\n    }\r\n\r\n    // console.log(\"------------开始监听----------\", this.removeEnd)\r\n    this.batchRender(); //初次执行再绑定监听  防止范围内直接加载数据不移动相机\r\n    this.removeChanged = this.camera.changed.addEventListener(() => {\r\n      this.batchRender();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 移除监听\r\n   */\r\n  endListener() {\r\n\r\n    // this.removeEnd();\r\n    this.removeChanged();\r\n\r\n    // 销毁图块状态和渲染\r\n    this.destoryTiles();\r\n\r\n    // console.log(\"------------结束监听----------\", this.removeEnd);\r\n  }\r\n\r\n  /**\r\n   * 销毁切片\r\n   */\r\n  destoryTiles() {\r\n\r\n    // 未请求待渲染 清除\r\n    this.tilesMapWillAdd.clear();\r\n\r\n    // 已请求待渲染 停止继续渲染\r\n    this.cesiumParams.endRender = true;\r\n\r\n    this.tilesIdArraysOld = [];\r\n    this.tilesMapRenderNow.forEach((primitiveTileDestory, idDestory) => {\r\n      {\r\n        debugger\r\n\r\n        // 去除几何\r\n        this.viewer.scene.primitives.remove(primitiveTileDestory);\r\n\r\n        // 更新渲染状态\r\n        this.tilesMapRenderNow.delete(idDestory);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 校准参数\r\n   */\r\n  calibration() {\r\n    let cameraPosition = this.camera.positionCartographic;\r\n\r\n    // 图块组变化后渲染\r\n    if (cameraPosition.height < this.requestHeight) {\r\n      if (\r\n        this.getTilesArrays(cameraPosition.longitude, cameraPosition.latitude)\r\n      ) {\r\n\r\n        //渲染待添加集合内几何数据\r\n        this.tilesMapWillAdd.forEach((positionArrays, id) => {\r\n\r\n          // 更新待添加状态\r\n          this.tilesMapWillAdd.delete(id);\r\n\r\n          // 测试  换成具体图形业务\r\n          this.testCameraBox(positionArrays, id);\r\n        });\r\n\r\n        // 删除范围外图块\r\n        this.tilesSetWillDelete.forEach((tileDelete) => {\r\n\r\n          // 更新待删除状态\r\n          this.tilesSetWillDelete.delete(tileDelete);\r\n\r\n          // 去除几何\r\n          this.viewer.scene.primitives.remove(\r\n            this.tilesMapRenderNow.get(tileDelete)\r\n          );\r\n\r\n          // 更新渲染状态\r\n          this.tilesMapRenderNow.delete(tileDelete);\r\n        });\r\n      }\r\n    }\r\n\r\n    // else {  TODO\r\n    //   //离开范围销毁渲染内容 不需要判断 空不循环\r\n    //   this.destoryTiles();\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * 校准中 测试图形  无异步问题  不需要设置异步后硬质渲染\r\n   * @param {Array} positionArrays  图块定位数组\r\n   * @param {String} id 图块编号  行_列\r\n   */\r\n\r\n  testCameraBox(\r\n    cesiumParams,\r\n    tilesMapRenderNow,\r\n    positionArrays,\r\n    id,\r\n    renderArrayHeight\r\n  ) {\r\n    let viewer = cesiumParams.viewer;\r\n\r\n    // 几何\r\n    let primitiveTile = null;\r\n    let greenPolygonInstance = new Cesium.GeometryInstance({\r\n      geometry: Cesium.PolygonGeometry.fromPositions({\r\n        extrudedHeight: 10.0,\r\n        positions: Cesium.Cartesian3.fromDegreesArray(positionArrays),\r\n        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,\r\n      }),\r\n      attributes: {\r\n        distanceDisplayCondition: new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(\r\n          renderArrayHeight[0],\r\n          renderArrayHeight[1]\r\n        ),\r\n        color: Cesium.ColorGeometryInstanceAttribute.fromColor(\r\n          Cesium.Color.fromRandom({\r\n            alpha: 0.5,\r\n          })\r\n        ),\r\n      },\r\n    });\r\n\r\n    primitiveTile = new Cesium.Primitive({\r\n      geometryInstances: [greenPolygonInstance], //绑定一起渲染，效率更高\r\n      appearance: new Cesium.PerInstanceColorAppearance({\r\n        closed: true,\r\n        translucent: false,\r\n      }),\r\n    });\r\n    viewer.scene.primitives.add(primitiveTile);\r\n\r\n    // 更新渲染状态\r\n    tilesMapRenderNow.set(id, primitiveTile);\r\n  }\r\n\r\n  /**\r\n   * 计算切片 2:1多叉   切片状态管理\r\n   * 通过经纬度获取数据范围\r\n   * @param {*} lon\r\n   * @param {*} lat\r\n   */\r\n  getTilesArrays(lon, lat) {\r\n\r\n    // osm  以-180->180(x) 90->-90(y)为坐标轴展开地图，以左上角为原点的经纬度值\r\n    let xLon = Math.PI + lon;\r\n    let yLat = Math.PI / 2 - lat;\r\n    let x = xLon / this.dlon; //levZ级OSM编号 小数 不能直接求余\r\n    let y = yLat / this.dlat;\r\n\r\n    //levZ级OSM编号\r\n    let rowNew = Math.floor(y);\r\n    let colNew = Math.floor(x); //向下取整\r\n    let rowChange = rowNew - this.row; //增加的编号 +右移动\r\n    let colChange = colNew - this.col; //+下移动\r\n    if (rowChange == 0 && colChange == 0) {\r\n      return false; //图块无变化\r\n    }\r\n\r\n    //取新图块组\r\n    let tilesArrays = [];\r\n    let tilesIdArrays = [];\r\n\r\n    let PI = Math.PI;\r\n    let cc2rd = 180 / PI;\r\n    for (let i = -this.tilesCountAdd; i <= this.tilesCountAdd; i++) {\r\n      for (let j = -this.tilesCountAdd; j <= this.tilesCountAdd; j++) {\r\n\r\n        // key图块行列号 value 图块四角坐标 [列 行号字符串，[经度，纬度]]\r\n        let tile = { id: colNew + j + \" \" + (rowNew + i) };\r\n        tile.positionArrays = [\r\n          ((colNew + j) * this.dlon - PI) * cc2rd, //\r\n          (PI / 2 - (rowNew + i) * this.dlat) * cc2rd,\r\n          ((colNew + j + 1) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i) * this.dlat) * cc2rd,\r\n          ((colNew + j + 1) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i + 1) * this.dlat) * cc2rd,\r\n          ((colNew + j) * this.dlon - PI) * cc2rd,\r\n          (PI / 2 - (rowNew + i + 1) * this.dlat) * cc2rd,\r\n        ];\r\n\r\n        // tile.geom = null;\r\n        tilesArrays.push(tile);\r\n        tilesIdArrays.push(tile.id);\r\n      }\r\n    }\r\n\r\n    //最新一次的差集 旧集合不含有新集合的部分 删除  array\r\n    let tilesArraysDeleteNew = this.tilesIdArraysOld.filter(\r\n      (id) => !new Set(tilesIdArrays).has(id)\r\n    );\r\n\r\n    //最新一次的差集差集 新集合 旧的没有  添加  附带坐标   array包含id等\r\n    let tilesArraysAddNew = tilesArrays.filter(\r\n      (item) => !new Set(this.tilesIdArraysOld).has(item.id)\r\n    );\r\n\r\n    // 更新状态\r\n    if (this.tilesIdArraysOld) {\r\n      for (let i = 0; i < tilesArraysDeleteNew.length; i++) {\r\n        this.tilesSetWillDelete.add(tilesArraysDeleteNew[i]);\r\n        this.tilesMapWillAdd.delete(tilesArraysDeleteNew[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < tilesArraysAddNew.length; i++) {\r\n      this.tilesMapWillAdd.set(\r\n        tilesArraysAddNew[i].id,\r\n        tilesArraysAddNew[i].positionArrays\r\n      );\r\n\r\n      // this.tilesSetWillDelete.delete(tilesArraysAddNew[i].id);\r\n    }\r\n\r\n    // console.log(\"旧图块id集合\", this.tilesIdArraysOld);\r\n    // console.log(\"新图块id集合\", tilesIdArrays);\r\n    // console.log(\"新图块集合\", tilesArrays);\r\n    // console.log(\"新图块待删除队列\", this.tilesSetWillDelete);\r\n    // console.log(\"新图块待添加队列\", this.tilesMapWillAdd);\r\n    //更新前图块ID\r\n    // 添加 tilesIdArrays.slice()\r\n    // this.tilesIdArraysOld.push(...tilesIdArrays);//删不干净考虑\r\n    this.tilesIdArraysOld = tilesIdArrays.slice();\r\n    this.row = Math.floor(y);\r\n    this.col = Math.floor(x);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 批量加载删除\r\n   * @param {*} WFSUrl\r\n   */\r\n  batchRender() {\r\n\r\n    // 图块中心点  TODO 视线中心\r\n    let cameraPosition = this.camera.positionCartographic;\r\n\r\n    // 图块组变化后渲染\r\n    if (\r\n      cameraPosition.height < this.requestHeight &&\r\n      this.getTilesArrays(cameraPosition.longitude, cameraPosition.latitude) //切片计算\r\n    ) {\r\n\r\n      //1渲染待添加集合内几何数据\r\n      this.tilesMapWillAdd.forEach((positionArrays, id) => {\r\n\r\n        // 更新待添加状态\r\n        this.tilesMapWillAdd.delete(id);\r\n        this.featureFunction(\r\n          this.cesiumParams,\r\n          this.tilesMapRenderNow,\r\n          positionArrays,\r\n          id,\r\n          this.renderArrayHeight\r\n        );\r\n      });\r\n\r\n      // 2删除范围外图块\r\n      this.tilesSetWillDelete.forEach((tileDelete) => {\r\n\r\n        // 删除已经渲染的，防止删除已请求但未返回进行渲染\r\n        if (this.tilesMapRenderNow.get(tileDelete)) {\r\n\r\n          // 去除几何\r\n          this.viewer.scene.primitives.remove(\r\n            this.tilesMapRenderNow.get(tileDelete)\r\n          );\r\n\r\n          // 更新待删除状态\r\n          this.tilesSetWillDelete.delete(tileDelete);\r\n\r\n          // 更新渲染状态\r\n          this.tilesMapRenderNow.delete(tileDelete);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { Universal3DSceneInterface };","// // 尺度变化\r\n// // Creates\r\n// //   [7.0, 0.0, 0.0, 0.0]\r\n// //   [0.0, 8.0, 0.0, 0.0]\r\n// //   [0.0, 0.0, 9.0, 0.0]\r\n// //   [0.0, 0.0, 0.0, 1.0]\r\n// var scaleXYZ = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(1, 2, 3));\r\n// Cesium.Matrix4.multiply(modelMatrix, scaleXYZ, modelMatrix);\r\n\r\n// //坐标位移\r\n// //创建平移矩阵方法一\r\n// const mat4 = Cesium.Matrix4.fromArray([\r\n//   1.0, 0.0, 0.0, 0.0,\r\n//   0.0, 1.0, 0.0, 0.0,\r\n//   0.0, 0.0, 1.0, 0.0,\r\n//   x, y, z, 1.0\r\n// ]);\r\n// //创建平移矩阵方法二\r\n// const translation = Cesium.Cartesian3.fromArray([x, y, z]);\r\n// const mat4 = Cesium.Matrix4.fromTranslation(translation);\r\n// //旋转\r\n// const mat3RoateX = Cesium.Matrix3.fromRotationX(Cesium.Math.toRadians(45))\r\n// const mat4 = Cesium.Matrix4.fromRotationTranslation(mat3RoateX)\r\n\r\n// //一个点正北方向x米的另一个点的坐标\r\n// function getNorthPointByDistance(position, distance) {\r\n//   //以点为原点建立局部坐标系（东方向为x轴,北方向为y轴,垂直于地面为z轴），得到一个局部坐标到世界坐标转换的变换矩阵\r\n//   var localToWorld_Matrix = Cesium.Transforms.eastNorthUpToFixedFrame(position);\r\n//   return Cesium.Matrix4.multiplyByPoint(localToWorld_Matrix, Cesium.Cartesian3.fromElements(0, distance, 0), new Cesium.Cartesian3())\r\n// }\r\nclass M4Translate{\r\n\r\n}\r\nexport{M4Translate}","class MouseClickTrans {\r\n\r\n  /**\r\n   * 鼠标选择像素数计算点选半径或包围球\r\n   */\r\n  constructor() {\r\n\r\n  }\r\n}\r\nexport{MouseClickTrans}","// /**\r\n//  * 转换位置信息\r\n//  * @param {*} Position \r\n//  * @param {*} pickResult \r\n//  */\r\n//  function transPosition(Position, pickResult) {\r\n//   if (Position) {\r\n//     pickResult.x = Position.x\r\n//     pickResult.y = Position.y\r\n//     pickResult.z = Position.z\r\n//     // let cameraCatographic = Cesium.Cartographic.fromCartesian(cameraPosition)//其他坐标系 默认Cesium.Ellipsoid.WGS84.cartesianToCartographic\r\n//     let positionRadiansArray = Cesium.Ellipsoid.WGS84.cartesianToCartographic(Position)\r\n//     pickResult.lon = Cesium.Math.toDegrees(positionRadiansArray.longitude)\r\n//     pickResult.lat = Cesium.Math.toDegrees(positionRadiansArray.latitude)\r\n//     pickResult.h = positionRadiansArray.height\r\n\r\n//   } else {\r\n//     // pickResult = null\r\n//   }\r\n\r\n// }\r\n\r\nclass TranslateSevenParams{}\r\n\r\nexport{TranslateSevenParams}","class WorldPositionTransform {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 经纬度高程修改positions\r\n   * @param {*} positions \r\n   * @param {*} heightAdd  m高度改正 \r\n   * @param {*} lonRadiansAdd 弧度！！！\r\n   * @param {*} latRadiansAdd 弧度\r\n   */\r\n  static PositionByCartographicChange(positions, heightAdd, lonRadiansAdd, latRadiansAdd) {\r\n    let positionResult\r\n    for (let i = 0; i < positions.length; i++) {\r\n      let cartographic = Cesium.Ellipsoid.WGS84.cartesianToCartographic(positions[i])\r\n      heightAdd && (cartographic.height += heightAdd)\r\n      lonRadiansAdd && (cartographic.lon += lonRadiansAdd)\r\n      latRadiansAdd && (cartographic.lat += latRadiansAdd)\r\n\r\n      positionResult[i] = Cesium.Cartesian3.fromRadians(cartographic)\r\n    }\r\n    return positionResult\r\n  }\r\n\r\n  /**\r\n   * 获取完整位置信息\r\n   * @param {*} coordinate \r\n   * @param {*} type \r\n   * @param {*} result \r\n   */\r\n  static getPositionAndCartographic(coordinate, type, result) {\r\n    let position\r\n    let cartographicRadians\r\n    let cartographicDegrees\r\n    switch (type) {\r\n    case 'position':\r\n      position = coordinate\r\n      break;\r\n    case 'cartographicDegrees':\r\n      cartographicRadians = coordinate\r\n      position = Cesium.Cartesian3.fromDegrees(coordinate.longitude, coordinate.latitude, coordinate.height)\r\n\r\n      // Cesium.Cartographic.fromDegrees\r\n      break;\r\n    case 'cartographicRadians':\r\n      cartographicDegrees = coordinate\r\n      position = Cesium.Cartesian3.fromRadians(coordinate.longitude, coordinate.latitude, coordinate.height)\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n    }\r\n    result.position = position\r\n\r\n    // let cameraCatographic = Cesium.Cartographic.fromCartesian(cameraPosition)//其他坐标系 默认Cesium.Ellipsoid.WGS84.cartesianToCartographic\r\n    result.cartographicRadians = cartographicRadians = cartographicRadians || Cesium.Ellipsoid.WGS84.cartesianToCartographic(position) // { longitude: -1.2401877595579294, latitude: 0.7390897322079129, height: -23.82495725068516 }\r\n    result.cartographicDegrees = cartographicDegrees || {\r\n      longitude: Cesium.Math.toDegrees(cartographicRadians.longitude),\r\n      latitude: Cesium.Math.toDegrees(cartographicRadians.latitude),\r\n      height: cartographicRadians.height\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport{WorldPositionTransform}","/* eslint-disable no-empty */\r\nimport { MouseListen } from \"../../control/mouse/MouseListen.js\"\r\nimport { RenderSimple } from '../../renderGeom/RenderSimple.js'\r\n\r\nclass BaseDraw extends MouseListen {\r\n\r\n  /**\r\n   * 基础绘制类  点线面 （贴地点，贴地线,贴地面） \r\n   * 自行继承组织点线面切面等几何图形\r\n   * @param {*} viewer \r\n   */\r\n  constructor(viewer) {\r\n    super(viewer)\r\n\r\n    // 绘制开关  支持种类\r\n    this.pointDrawBool = false\r\n    this.lineDrawBool = false\r\n    this.polygonDrawBool = false\r\n    this.lineGroundDrawBool = false\r\n    this.polygonGroundDrawBool = false\r\n\r\n    this.storeEntities = false\r\n\r\n    this.linearr = [];\r\n  }\r\n  randomColor() {\r\n    this.pointColor = Cesium.Color.fromRandom()\r\n    this.lineColor = Cesium.Color.fromAlpha(this.pointColor, 0.7)\r\n    this.polygonColor = Cesium.Color.fromAlpha(this.pointColor, 0.3)\r\n  }\r\n  stateStart() {\r\n    super.stateStart()\r\n    this.randomColor()\r\n\r\n    // 总绘制\r\n    this.PrimitiveAll = this.PrimitiveAll ||\r\n      this.viewer.scene.primitives.add(new Cesium.PrimitiveCollection())\r\n\r\n    // entity 总绘制\r\n    let myEntityCollection = new Cesium.CustomDataSource(\"clickEntityCollection\");\r\n    this.viewer.dataSources.add(myEntityCollection);\r\n    this.entities = myEntityCollection.entities\r\n\r\n    // 鼠标移动指示  监听指示\r\n    if (!this._mouseMovePointPrimitives) {\r\n      this._mouseMovePointPrimitivesCollection = this.viewer.scene.primitives.add(new Cesium.PointPrimitiveCollection());\r\n      this._mouseMovePointPrimitives =\r\n        RenderSimple.simplePointByPrimitives(this._mouseMovePointPrimitivesCollection, Cesium.Cartesian3.ZERO, 20, Cesium.Color.fromAlpha(Cesium.Color.RED, 0.5), 3.0)\r\n    }\r\n\r\n    /**\r\n     * 图形状态\r\n     * 绘制点线面和其他\r\n     */\r\n    this._pointPrimitives = this.PrimitiveAll.add(new Cesium.PointPrimitiveCollection()) //默认贴地\r\n    this._polylinePrimitive = this.PrimitiveAll.add(new Cesium.PolylineCollection()) //真实悬空线\r\n    this._polygonPrimitives = this.PrimitiveAll.add(new Cesium.PrimitiveCollection()) //真实纯粹多面  非顺序三角面（综合）\r\n    this._polylineGroundPrimitive = this.PrimitiveAll.add(new Cesium.PrimitiveCollection()) //贴地线\r\n    this._polygonGroundPrimitive = this.PrimitiveAll.add(new Cesium.PrimitiveCollection()) //贴地面\r\n\r\n    // 活动线\r\n    this.mouseLinePrimitive = null\r\n    this.mousePolygonGroundEntity = null //贴地面\r\n    this.mouseLineGroundEntity = null //贴地线\r\n\r\n  }\r\n\r\n  /**\r\n   * 绘制点  多单点  双击一批次\r\n   */\r\n  drawPointStart() { this.pointDrawBool = !this.pointDrawBool }\r\n  drawLineStart() { this.lineDrawBool = !this.lineDrawBool }\r\n  drawPolygonStart() { this.polygonDrawBool = !this.polygonDrawBool }\r\n  drawGroundLineStart() { this.lineGroundDrawBool = !this.lineGroundDrawBool }\r\n  drawGroundPolygonStart() { this.polygonGroundDrawBool = !this.polygonGroundDrawBool }\r\n  storeEntitiesStart() { this.storeEntities = !this.storeEntities }\r\n\r\n  // 监听\r\n  set click_MOUSE_MOVE(value) {\r\n\r\n    // 开启监听提供指示\r\n    this._mouseMovePointPrimitives.position = this._clickPositions[this._clickPositions.length - 1]\r\n\r\n    if (this.pointDrawBool) {}\r\n    if (this.lineDrawBool && this.mouseLinePrimitive) { this.mouseLinePrimitive.positions = this._clickPositions } //更新线\r\n\r\n    if (this.polygonDrawBool) {}\r\n    if (this.lineGroundDrawBool && this.mouseLineGroundEntity) {}\r\n    if (this.polygonGroundDrawBool) {}\r\n  }\r\n\r\n  set click_LEFT_CLICK(value) {\r\n\r\n    let clickScene = this._clickPositions[this._clickPositions.length - 1]\r\n    if (this.pointDrawBool) { RenderSimple.simplePointByPrimitives(this._pointPrimitives, clickScene, 10, Cesium.Color.fromAlpha(this.pointColor, 0.5), 3.0) }\r\n    if (this.lineDrawBool) {\r\n\r\n      // 不存在->添加初始线\r\n      this.mouseLinePrimitive = this.mouseLinePrimitive || RenderSimple.simpleLineByPrimitive(this._polylinePrimitive, this._clickPositions, 10, this.lineColor)\r\n    }\r\n    if (this.polygonDrawBool) {\r\n\r\n    }\r\n    if (this.lineGroundDrawBool) {\r\n\r\n      if (!this.mouseLineGroundEntity) {\r\n        this.mouseLineGroundEntity = this.entities.add({\r\n          name: 'line',\r\n          polyline: {\r\n            positions: new Cesium.CallbackProperty(() => {\r\n              return this._clickPositions;\r\n            }, false),\r\n            width: 3,\r\n            material: Cesium.Color.fromAlpha(this.lineColor, 0.5),\r\n            clampToGround: true,\r\n          }\r\n        });\r\n      }\r\n\r\n      // console.log(this.mouseLineGroundEntity.polyline)\r\n\r\n    }\r\n\r\n    if (this.polygonGroundDrawBool) {\r\n      if (!this.mousePolygonGroundEntity) {\r\n        console.log('绘制')\r\n        console.log(this._clickPositions)\r\n\r\n        this.mousePolygonGroundEntity = this.entities.add({\r\n\r\n          // name: 'polygon',\r\n          polygon: {\r\n            hierarchy: new Cesium.CallbackProperty(() => {\r\n              return new Cesium.PolygonHierarchy(this._clickPositions);\r\n            }, false),\r\n\r\n            // hierarchy: new Cesium.PolygonHierarchy(this._clickPositions),\r\n            material: Cesium.Color.fromAlpha(this.lineColor, 0.3),\r\n          }\r\n        });\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  set click_LEFT_DOUBLE_CLICK(value) {\r\n    let clickScene = this._clickPositions[this._clickPositions.length - 1]\r\n    if (this.pointDrawBool) { //无需绘制\r\n    }\r\n    if (this.lineDrawBool) {\r\n      this.mouseLinePrimitive = null\r\n    }\r\n    if (this.lineGroundDrawBool) {\r\n      console.log(this.mouseLineGroundEntity.polyline)\r\n\r\n      // this.mouseLineGroundEntity.polyline._callback = null\r\n      if (this.storeEntities) {\r\n        this.mouseLineGroundEntity.polyline.positions = this._clickPositions\r\n      }\r\n\r\n      this.mouseLineGroundEntity = null\r\n    }\r\n    if (this.polygonDrawBool) {\r\n      console.log('绘制真实面', this._clickPositions)\r\n      let color = Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromAlpha(this.pointColor, 0.5))\r\n\r\n      // let color = Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromAlpha(Cesium.Color.WHITE, 0.5))\r\n      let polygonInstance = new Cesium.GeometryInstance({\r\n        geometry: new Cesium.PolygonGeometry({\r\n          polygonHierarchy: new Cesium.PolygonHierarchy(this._clickPositions),\r\n          perPositionHeight: true,\r\n        }),\r\n        attributes: { color: color }\r\n      });\r\n      this._polygonPrimitives.add(new Cesium.Primitive({\r\n        geometryInstances: [polygonInstance],\r\n        appearance: new Cesium.PerInstanceColorAppearance()\r\n      }));\r\n    }\r\n\r\n    if (this.polygonGroundDrawBool) {\r\n\r\n      // let color = Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromAlpha(this.pointColor, 0.5))\r\n      // let polygonInstance = new Cesium.GeometryInstance({\r\n      //   geometry: new Cesium.PolygonGeometry({ polygonHierarchy: new Cesium.PolygonHierarchy(this._clickPositions) }), // id: 'polygon ',\r\n      //   attributes: { color: color }\r\n      // });\r\n      // this._polygonGroundPrimitive.add(new Cesium.GroundPrimitive({ geometryInstances: [polygonInstance] }));\r\n\r\n      // console.log('最终面', this._clickPositions)\r\n      // this.mousePolygonGroundEntity = this.viewer.entities.add({\r\n      //   name: 'polygon',\r\n      //   polygon: {\r\n      //     hierarchy: {\r\n      //       positions: this._clickPositions\r\n      //     },\r\n      //     perPositionHeight: true, //对每个位置使用options.positions的height，而不使用options.height来确定高度\r\n      //     extrudedHeight: 1,\r\n      //     material: Cesium.Color.BLUE,\r\n      //     outline: true,\r\n      //     outlineColor: Cesium.Color.BLACK.withAlpha(1) //黑色轮廓线\r\n      //   }\r\n      // });\r\n      if (this.storeEntities) {\r\n        console.log(this.mouseLineGroundEntity)\r\n        this.mousePolygonGroundEntity.polygon.hierarchy = new Cesium.PolygonHierarchy(this._clickPositions)\r\n      }\r\n      this.mousePolygonGroundEntity = null\r\n    }\r\n\r\n    this.randomColor()\r\n  }\r\n\r\n  removeAll() {\r\n    super.removeAll()\r\n\r\n    // 鼠标移动指示\r\n    this._mouseMovePointPrimitivesCollection.remove(this._mouseMovePointPrimitives)\r\n    this._mouseMovePointPrimitives = null\r\n\r\n    // 图形\r\n    this.PrimitiveAll.removeAll()\r\n    this.entities.removeAll()\r\n  }\r\n}\r\n\r\nexport { BaseDraw }","class CameraPro {\r\n\r\n  /**\r\n   * 相机状态\r\n   * @param {*} camera \r\n   */\r\n  constructor(camera) {\r\n    this.camera = camera\r\n  }\r\n\r\n  /**\r\n   * 相机视角 scene.camera.cancelFlight();\r\n   * @param {Object} params {\"y\":39.092423,\"x\":121.990975,\"z\":87.84,\"heading\":23.4,\"pitch\":-51.9,\"roll\":0}\r\n   */\r\n\r\n  static cameraFlyTo(params, viewer) {\r\n    viewer.camera.flyTo({\r\n\r\n      // duration:10,\r\n      // cancel:()=>{console.log(\"中断\")},\r\n      destination: Cesium.Cartesian3.fromDegrees(params.x, params.y, params.z),\r\n      orientation: {\r\n        heading: Cesium.Math.toRadians(params.heading),\r\n        pitch: Cesium.Math.toRadians(params.pitch),\r\n        roll: Cesium.Math.toRadians(params.roll),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 相机视角\r\n   * @param {Object} params {\"y\":39.092423,\"x\":121.990975,\"z\":87.84,\"heading\":23.4,\"pitch\":-51.9,\"roll\":0}\r\n   */\r\n  static cameraSetView(params, viewer) {\r\n    viewer.camera.setView({\r\n      destination: Cesium.Cartesian3.fromDegrees(params.x, params.y, params.z),\r\n      orientation: {\r\n        heading: Cesium.Math.toRadians(params.heading),\r\n        pitch: Cesium.Math.toRadians(params.pitch),\r\n        roll: Cesium.Math.toRadians(params.roll),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 相机视角\r\n   * @param {Object} params {\"y\":39.092423,\"x\":121.990975,\"z\":87.84,\"heading\":23.4,\"pitch\":-51.9,\"roll\":0}\r\n   */\r\n  static cameraSetViewGraphic(params, viewer) {\r\n    viewer.camera.setView({\r\n      destination: Cesium.Cartesian3.fromDegrees(params.lon, params.lat, params.h),\r\n      orientation: {\r\n        heading: Cesium.Math.toRadians(params.heading),\r\n        pitch: Cesium.Math.toRadians(params.pitch),\r\n        roll: Cesium.Math.toRadians(params.roll),\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 相机视角\r\n   * @param {Object} params {\"y\":39.092423,\"x\":121.990975,\"z\":87.84,\"heading\":23.4,\"pitch\":-51.9,\"roll\":0}\r\n   */\r\n  static cameraSetViewCartesian3(params, viewer) {\r\n    viewer.camera.setView({\r\n      destination: { x: params.x, y: params.y, z: params.z },\r\n      orientation: {\r\n        heading: Cesium.Math.toRadians(params.heading),\r\n        pitch: Cesium.Math.toRadians(params.pitch),\r\n        roll: Cesium.Math.toRadians(params.roll),\r\n      },\r\n    });\r\n  }\r\n\r\n}\r\n\r\n// // tileset.readyPromise.then(function (tileset) {\r\n// //   // Set the camera to view the newly added tileset\r\n// //   viewer.camera.viewBoundingSphere(tileset.boundingSphere, new Cesium.HeadingPitchRange(0, -0.5, 0));\r\n// // });\r\n\r\n// viewer.zoomTo(tileset);\r\n\r\nexport { CameraPro }\r\n\r\n// https://blog.csdn.net/u010447508/article/details/105562542","/**\r\n * HandlerManager\r\n *\r\n * @author Wangxu\r\n * @date 2021/5/6\r\n */\r\n\r\nclass HandlerManager {\r\n    constructor() {\r\n        this.handlers = new Map()\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!this.Instance) {\r\n            this.Instance = new HandlerManager();\r\n        }\r\n        return this.Instance;\r\n    }\r\n\r\n    addHandler(id, viewer) {\r\n        let handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas)\r\n        this.handlers.set(id, handler)\r\n    }\r\n\r\n}\r\n\r\nexport{HandlerManager}","class BaseLayers {\r\n\r\n  /**\r\n   * 基础图层添加管理\r\n   * 原始函数！\r\n   * @param {*} viewer\r\n   */\r\n  constructor(viewer) {\r\n    this.viewer = viewer\r\n    this.layersIdConfig = new Map()\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} name\r\n   * @param {*} type\r\n   * @param {*} index 叠加顺序 默认最高\r\n   * @param {*} config 非默认图层配置 type url typename layer id\r\n   *   {\r\n                          \"id\": 0,\r\n                          \"pid\": 0,\r\n                          \"name\": \"离线世界地图\",\r\n                          \"icon\": \"/webjars/marsgis/widgets/manageBasemaps/img/basemaps/gaode_img.png\",\r\n                          \"type\": \"tms\",\r\n                          \"url\": \"http://192.168.0.253/DOM/ChinaMap\",\r\n                          \"fileExtension\": \"jpeg\",\r\n                          \"visible\": true,\r\n                          \"order\": 0\r\n                      },\r\n   * @returns\r\n   */\r\n  addLayer(config) {\r\n\r\n    //请求设置\r\n    Cesium.RequestScheduler.maximumRequests = 500\r\n    Cesium.RequestScheduler.maximumRequestsPerServer = 500\r\n\r\n    // Cesium.RequestScheduler.maximumRequestsPerServer= false\r\n    let key\r\n    let provider //图层\r\n    switch (config.type) {\r\n      case 'tms': //tms\r\n        provider = new Cesium.TileMapServiceImageryProvider({\r\n          url: config.url, //url为文件夹地址\r\n        })\r\n        break\r\n\r\n      //配置\r\n      //     \"map_pipline_wms\": {\r\n      //     \"url\": \"http://192.168.5.102:8080/geoserver/PipeBatch/wms\",\r\n      //         \"typename\": \"PipeBatch:map_pipeline\"\r\n      // },\r\n      //     \"map_pipline_wmts\": {\r\n      //     \"url\": \"http://192.168.5.102:8080/geoserver/gwc/service/wmts\",\r\n      //         \"typename\": \"PipeBatch:map_pipeline\"\r\n      // },\r\n      case 'geoserver_WMTS': //geoserver WMTS\r\n        let matrixIds = [\r\n          'EPSG:4326:0',\r\n          'EPSG:4326:1',\r\n          'EPSG:4326:2',\r\n          'EPSG:4326:3',\r\n          'EPSG:4326:4',\r\n          'EPSG:4326:5',\r\n          'EPSG:4326:6',\r\n          'EPSG:4326:7',\r\n          'EPSG:4326:8',\r\n          'EPSG:4326:9',\r\n          'EPSG:4326:10',\r\n          'EPSG:4326:11',\r\n          'EPSG:4326:12',\r\n          'EPSG:4326:13',\r\n          'EPSG:4326:14',\r\n          'EPSG:4326:15',\r\n          'EPSG:4326:16',\r\n          'EPSG:4326:17',\r\n          'EPSG:4326:18',\r\n          'EPSG:4326:19',\r\n          'EPSG:4326:20',\r\n          'EPSG:4326:21',\r\n        ]\r\n\r\n        //1.新建ImageryProvider\r\n        provider = new Cesium.WebMapTileServiceImageryProvider({\r\n          url: config.url,\r\n          layer: config.typename,\r\n          style: '',\r\n          format: 'image/png',\r\n          tileMatrixSetID: 'EPSG:4326',\r\n          tileMatrixLabels: matrixIds,\r\n          tilingScheme: new Cesium.GeographicTilingScheme({\r\n            numberOfLevelZeroTilesX: 2,\r\n            numberOfLevelZeroTilesY: 1,\r\n          }),\r\n        })\r\n        break\r\n      case 'osm_vt': //矢量图\r\n        provider = new Cesium.OpenStreetMapImageryProvider({\r\n          url: 'https://a.tile.openstreetmap.org/',\r\n        })\r\n        break\r\n\r\n      //天地图影像\r\n      case 'tdt_img':\r\n        key = config.key || '8a7a551905711535885142a660a10111'\r\n        provider = new Cesium.WebMapTileServiceImageryProvider({\r\n          url:\r\n            'http://{s}.tianditu.gov.cn/img_c/wmts?service=wmts&request=GetTile&version=1.0.0' +\r\n            '&LAYER=img&tileMatrixSet=c&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}' +\r\n            '&style=default&format=tiles&tk=' +\r\n            key,\r\n          layer: 'tdtCva',\r\n          style: 'default',\r\n          format: 'tiles',\r\n          tileMatrixSetID: 'c',\r\n          subdomains: ['t0', 't1', 't2', 't3', 't4', 't5', 't6', 't7'],\r\n          tilingScheme: new Cesium.GeographicTilingScheme(),\r\n          tileMatrixLabels: [\r\n            '1',\r\n            '2',\r\n            '3',\r\n            '4',\r\n            '5',\r\n            '6',\r\n            '7',\r\n            '8',\r\n            '9',\r\n            '10',\r\n            '11',\r\n            '12',\r\n            '13',\r\n            '14',\r\n            '15',\r\n            '16',\r\n            '17',\r\n            '18',\r\n\r\n            // , \"19\"\r\n          ],\r\n          maximumLevel: 18,\r\n          show: false,\r\n        })\r\n        break\r\n\r\n      //天地图标注\r\n      case 'tdt_lb':\r\n        key = config.key || '8a7a551905711535885142a660a10111'\r\n        provider = new Cesium.WebMapTileServiceImageryProvider({\r\n          url:\r\n            'http://{s}.tianditu.gov.cn/cia_c/wmts?service=wmts&request=GetTile&version=1.0.0' +\r\n            '&LAYER=cia&tileMatrixSet=c&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}' +\r\n            '&style=default&format=tiles&tk=' +\r\n            key,\r\n          layer: 'tdtCva',\r\n          style: 'default',\r\n          format: 'tiles',\r\n          tileMatrixSetID: 'c',\r\n          subdomains: ['t0', 't1', 't2', 't3', 't4', 't5', 't6', 't7'],\r\n          tilingScheme: new Cesium.GeographicTilingScheme(),\r\n          tileMatrixLabels: [\r\n            '1',\r\n            '2',\r\n            '3',\r\n            '4',\r\n            '5',\r\n            '6',\r\n            '7',\r\n            '8',\r\n            '9',\r\n            '10',\r\n            '11',\r\n            '12',\r\n            '13',\r\n            '14',\r\n            '15',\r\n            '16',\r\n            '17',\r\n            '18',\r\n          ],\r\n          maximumLevel: 18,\r\n          show: false,\r\n        })\r\n        break\r\n      case 'bing_img': //bing 影像\r\n        provider = Cesium.createWorldImagery({\r\n          style: Cesium.IonWorldImageryStyle.AERIAL,\r\n        })\r\n        break\r\n      case 'bing_lb': //bing影像附带标注\r\n        provider = Cesium.createWorldImagery({\r\n          style: Cesium.IonWorldImageryStyle.AERIAL_WITH_LABELS,\r\n        })\r\n        break\r\n\r\n      case '3dtiles': //bing影像附带标注\r\n        config.layer = this.viewer.scene.primitives.add(\r\n          new Cesium.Cesium3DTileset({\r\n\r\n            // url: '../../../data/freedata/SampleData/Cesium3DTiles/Classification/Photogrammetry/tileset.json'\r\n            url: config.url,\r\n            maximumScreenSpaceError: 2, //最大的屏幕空间误差\r\n            maximumNumberOfLoadedTiles: 10000, //最大加载瓦片个数\r\n            show: true,\r\n          })\r\n        )\r\n        this.layersIdConfig.set(config.id, config)\r\n        break\r\n\r\n      case 'test3Dtiles': //ion 数据\r\n        Cesium.Ion.defaultAccessToken =\r\n          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2MTRiM2IxYy1iZGZkLTRmOTktYWVhMi0xZTE2ZjU4NzliMDMiLCJpZCI6Mzc0NjAsImlhdCI6MTYwNTA3NzQ1MX0.GEvT_KwEV9MjAqyXHyS-ezcITyKc53X3MQDWBLPElI0'\r\n        config.layer = this.viewer.scene.primitives.add(\r\n          new Cesium.Cesium3DTileset({\r\n            url: Cesium.IonResource.fromAssetId(354759), //测试3dtiles\r\n            // url: Cesium.IonResource.fromAssetId(96188),\r\n            maximumScreenSpaceError: 2, //最大的屏幕空间误差\r\n            maximumNumberOfLoadedTiles: 10000, //最大加载瓦片个数\r\n            show: true,\r\n          })\r\n        )\r\n        this.layersIdConfig.set(config.id, config)\r\n        break\r\n      case 'terrain':\r\n        this.viewer.terrainProvider = new Cesium.CesiumTerrainProvider({\r\n          url: config.url,\r\n\r\n          // requestWaterMask: true\r\n        })\r\n        this.layersIdConfig.set(config.id, config)\r\n        break\r\n      case 'WorldTerrain': //ion 数据\r\n        this.viewer.terrainProvider = Cesium.createWorldTerrain({\r\n\r\n          //requestWaterMask: config.requestWaterMask,\r\n          requestWaterMask: true, // required for water effects\r\n          // requestVertexNormals: true, // required for terrain lighting\r\n        })\r\n        this.layersIdConfig.set(config.id, config)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    if (provider) {\r\n\r\n      //注意新加图层排序\r\n      config.layer = this.viewer.imageryLayers.addImageryProvider(\r\n        provider,\r\n        config.order\r\n      )\r\n      this.layersIdConfig.set(config.id, config)\r\n    }\r\n  }\r\n\r\n  remove(config) {\r\n    let layer = this.layersIdConfig.get(config.id).layer\r\n\r\n    switch (config.type) {\r\n      case '3dtiles':\r\n        this.viewer.scene.primitives.remove(layer)\r\n        break\r\n      case 'test3Dtiles':\r\n        this.viewer.scene.primitives.remove(layer)\r\n        break\r\n      case 'terrain':\r\n        if (this.viewer.terrainProvider._ready) {\r\n\r\n          //清除原有地形\r\n          this.viewer.terrainProvider = new Cesium.EllipsoidTerrainProvider({})\r\n        }\r\n        break\r\n      case 'WorldTerrain':\r\n        if (this.viewer.terrainProvider._ready) {\r\n\r\n          //清除原有地形\r\n          this.viewer.terrainProvider = new Cesium.EllipsoidTerrainProvider({})\r\n        }\r\n        break\r\n      default:\r\n        this.viewer.imageryLayers.remove(layer)\r\n        break\r\n    }\r\n\r\n    this.layersIdConfig.delete(config.id)\r\n  }\r\n\r\n  removeAll() {\r\n    this.layersIdConfig.forEach((config) => {\r\n      this.remove(config)\r\n    })\r\n  }\r\n}\r\nexport { BaseLayers }\r\n","class RenderPlanes{\r\n  constructor(){\r\n\r\n  }\r\n\r\n}\r\n\r\nexport {RenderPlanes}","// var viewer = new Cesium.Viewer(\"cesiumContainer\", {\r\n//   terrainProvider: new Cesium.ArcGISTiledElevationTerrainProvider({\r\n//     url: \"https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\",\r\n//   }),\r\n// });\r\n\r\n// // Load Cesium World Terrain\r\n// viewer.terrainProvider = Cesium.createWorldTerrain({\r\n//   requestWaterMask : true, // required for water effects\r\n//   requestVertexNormals : true // required for terrain lighting\r\n// });\r\n\r\nclass TerrainProvider{\r\n\r\n}\r\nexport{TerrainProvider}","/**\r\n * 初始化渲染，db和PrimitiveCollection组织管理\r\n * \r\n * 初次加载缓存？？？\r\n */\r\nclass PrimitivesTree {\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n\r\n    // 渲染模型集合\r\n    this.primitiveModelCollection = new Cesium.PrimitiveCollection() //总体\r\n    this.viewer.scene.primitives.add(this.primitiveModelCollection, '100');\r\n    this.tree = new Map(); //id,primitive parentNode childrenNode[Map0 Map1...]\r\n    // db todo\r\n\r\n  }\r\n\r\n  addNode() {\r\n\r\n  }\r\n\r\n  getNode() {\r\n\r\n  }\r\n\r\n  removeNode() {\r\n\r\n  }\r\n\r\n  updateNode() {\r\n\r\n  }\r\n\r\n}\r\nexport{PrimitivesTree}","export let VERSION = '1.0';\nexport { TMFunc1 } from './core/TMFunc1.js';\r\nexport { InitViewer } from './core/init/InitViewer.js';\r\nexport { ViwerSet } from './core/init/ViwerSet.js';\r\nexport { ComputationalGeom } from './core/math/ComputationalGeom.js';\r\nexport { UsualGeom } from './core/math/UsualGeom.js';\r\nexport { HoleDraw } from './core/mouse/HoleDraw.js';\r\nexport { RenderInstance } from './core/renderGeom/RenderInstance.js';\r\nexport { RenderSimple } from './core/renderGeom/RenderSimple.js';\r\nexport { RenderGlb } from './core/renderModel/RenderGlb.js';\r\nexport { renderModelByprimitive } from './core/renderModel/renderModelByprimitive.js';\r\nexport { CesiumPrimitivesProvider } from './core/tiles/CesiumPrimitivesProvider.js';\r\nexport { Universal3DSceneInterface } from './core/tiles/Universal3DSceneInterface.js';\r\nexport { LocalAndWorldTransform } from './core/translate/LocalAndWorldTransform.js';\r\nexport { M4Translate } from './core/translate/M4Translate.js';\r\nexport { MouseClickTrans } from './core/translate/MouseClickTrans.js';\r\nexport { TranslateSevenParams } from './core/translate/TranslateSevenParams.js';\r\nexport { WorldPositionTransform } from './core/translate/WorldPositionTransform.js';\r\nexport { BaseDraw } from './core/draw/mouse/BaseDraw.js';\r\nexport { CameraPro } from './core/control/camera/CameraPro.js';\r\nexport { HandlerManager } from './core/control/event/HandlerManager.js';\r\nexport { MouseListen } from './core/control/mouse/MouseListen.js';\r\nexport { BaseLayers } from './core/primitives/BaseData/BaseLayers.js';\r\nexport { ClippingPlanesByGeom } from './core/primitives/clipPlanes/ClippingPlanesByGeom.js';\r\nexport { RenderPlanes } from './core/primitives/clipPlanes/RenderPlanes.js';\r\nexport { TerrainProvider } from './core/primitives/DEM/TerrainProvider.js';\r\nexport { PrimitivesTree } from './core/primitives/manager/PrimitivesTree.js';\r\n"],"names":["TMFunc1","console","log","InitViewer","constructor","defaultAccessToken","this","viewers","Map","Cesium","Ion","getInstance","Instance","addViewer","viewerId","viewer","Viewer","animation","baseLayerPicker","fullscreenButton","vrButton","geocoder","homeButton","infoBox","sceneModePicker","selectionIndicator","timeline","navigationHelpButton","navigationInstructionsInitiallyVisible","imageryLayers","removeAll","set","ViwerSet","screenSpaceEventHandler","removeInputAction","ScreenSpaceEventType","LEFT_DOUBLE_CLICK","LEFT_CLICK","haoutil","system","isPCBroswer","targetFrameRate","requestRenderMode","scene","fog","enable","skyAtmosphere","show","fxaa","window","navigator","userAgent","toLowerCase","indexOf","logarithmicDepthBuffer","postProcessStages","enabled","highDynamicRange","RequestScheduler","maximumRequests","maximumRequestsPerServer","viewModel","duration","cesiumWidget","_supportsImageRenderingPixelated","vtxf_dpr","devicePixelRatio","resolutionScale","ComputationalGeom","booleanClockwise","booleanClockwiseWindow","booleanClockwiseGloble","getLerpByPoints","positionTwo","density","pointStart","pointEnd","positions","countPoints","Math","ceil","Cartesian3","distance","i","ponitThis","lerp","push","polygonDirectionSet","clickPositions","polygonDirection","length","points","directionLast","subtract","directionNow","directionUpNow","cross","directionPointDirectionUpNowAngle","angleBetween","directionEnd","directionUpEnd","UsualGeom","MouseListen","handler","ScreenSpaceEventHandler","canvas","stateStart","_clickPositionsArrays","_clickPositions","click_LEFT_CLICK_Time","Date","drawListen","setInputAction","movement","endPosition","clickScene","pickPosition","click_MOUSE_MOVE","MOUSE_MOVE","click","position","singleLeftClickBool","click_LEFT_CLICK","clickWindow","pop","_clickPositionsStatic","slice","click_LEFT_DOUBLE_CLICK","value","test","destroy","click_LEFT_CLICK_TimeNew","leftClickTimeBool","leftClickDistanceBool","LocalAndWorldTransform","RCSorigincenter","direction","RCSMatrix","Transforms","northEastDownToFixedFrame","northUpEastToFixedFrame","northWestUpToFixedFrame","eastNorthUpToFixedFrame","RCSmatrixInverse","Matrix4","inverseTransformation","localToWorldCoordinates","localCoordinates","result","multiplyByPoint","WorldCoordinatesTolocal","WorldCoordinates","ClippingPlanesByGeom","setClippingPlanesSimple","modelsArray","directionStart","index","model","clippingPlanes","name","nextIndex","up","add","right","multiplyByScalar","normal","planeTmp","Plane","fromPointNormal","ClippingPlane","fromPlane","point3DtilesPositions","localAndWorldTransform","boundingSphere","center","forEach","clickPosition","postion","ClippingPlaneCollection","planes","edgeWidth","edgeColor","Color","WHITE","destroyAll","RenderSimple","simplePointByPrimitives","PrimitiveCollection","width","color1","outlineWidth","pixelSize","color","outlineColor","id","undefined","simplePolygonByPrimitive","alpha","simplePolygonByPrimitiveInstance","DiffuseMapImage","materialOption","fabric","type","uniforms","image","repeat","x","y","polygonInstance","GeometryInstance","geometry","PolygonGeometry","polygonHierarchy","PolygonHierarchy","perPositionHeight","Primitive","geometryInstances","appearance","MaterialAppearance","material","Material","simpleVolumeBox","coordinates","ZERO","ColorGeometryInstanceAttribute","fromColor","fromCssColorString","withAlpha","TRANSPARENT","simpleLineByPrimitive","boolAlpha","linePrimitive","PolylineGeometry","fromDegreesArray","vertexFormat","PolylineColorAppearance","VERTEX_FORMAT","attributes","translucent","simpleLineHeightByPrimitive","fromDegreesArrayHeights","HoleDraw","holeBottomImgPath","super","holeTerrainDrawBool","hole3DtilesDrawBool","pointDensity","holeBottomDepth","PrimitiveAll","primitives","globe","polygonDirectionStart","_polygonPrimitives","_holeWallPositions","_holeDownPositions","clippingPlanesModels","holeTerrainDrawStart","hole3DtilesDrawStart","hole3DtilesUrl","_primitives","primitive","_url","tileset","pointsLength","holeBottomAltitude","Ellipsoid","WGS84","cartesianToCartographic","height","cartographic","fromRadians","longitude","latitude","positionsTwo","positionsUpFull","clampToHeightMostDetailed","then","updatedCartesians","updatedCartesian","splice","fromBytes","_mouseMovePointPrimitives","RenderInstance","PolylineVolumeGeometryInstance","polylinePositions","shapePositions","polylinevolumeinstance","PolylineVolumeGeometry","MaterialSupport","BASIC","fromType","fromAlpha","flat","RenderGlb","renderSimpleGlb","url","modelMatrix","primitiveModelCollection","modelPosition","Model","fromGltf","readyPromise","colorBlendMode","ColorBlendMode","MIX","colorBlendAmount","silhouetteColor","silhouetteSize","camera","renderGlbPositionGraphic","diriction","scale","renderModelByprimitive","CesiumPrimitivesProvider","setParams","levZ","tilesCountAdd","requestHeight","renderArrayHeight","startDlat","tilesCount","tilesSize","pow","floor","PI","dlat","dlon","row","col","tilesIdArraysOld","tilesMapWillAdd","tilesSetWillDelete","Set","tilesMapRenderNow","startListener","featureFunction","cesiumParams","endRender","testCameraBox","batchRender","removeChanged","changed","addEventListener","endListener","destoryTiles","clear","primitiveTileDestory","idDestory","remove","delete","calibration","cameraPosition","positionCartographic","getTilesArrays","positionArrays","tileDelete","get","primitiveTile","greenPolygonInstance","fromPositions","extrudedHeight","PerInstanceColorAppearance","distanceDisplayCondition","DistanceDisplayConditionGeometryInstanceAttribute","fromRandom","closed","lon","lat","xLon","yLat","rowNew","colNew","rowChange","colChange","tilesArrays","tilesIdArrays","cc2rd","j","tile","tilesArraysDeleteNew","filter","has","tilesArraysAddNew","item","Universal3DSceneInterface","M4Translate","MouseClickTrans","TranslateSevenParams","WorldPositionTransform","PositionByCartographicChange","heightAdd","lonRadiansAdd","latRadiansAdd","positionResult","getPositionAndCartographic","coordinate","cartographicRadians","cartographicDegrees","fromDegrees","toDegrees","BaseDraw","pointDrawBool","lineDrawBool","polygonDrawBool","lineGroundDrawBool","polygonGroundDrawBool","storeEntities","linearr","randomColor","pointColor","lineColor","polygonColor","myEntityCollection","CustomDataSource","dataSources","entities","_mouseMovePointPrimitivesCollection","PointPrimitiveCollection","RED","_pointPrimitives","_polylinePrimitive","PolylineCollection","_polylineGroundPrimitive","_polygonGroundPrimitive","mouseLinePrimitive","mousePolygonGroundEntity","mouseLineGroundEntity","drawPointStart","drawLineStart","drawPolygonStart","drawGroundLineStart","drawGroundPolygonStart","storeEntitiesStart","polyline","CallbackProperty","clampToGround","polygon","hierarchy","CameraPro","cameraFlyTo","params","flyTo","destination","z","orientation","heading","toRadians","pitch","roll","cameraSetView","setView","cameraSetViewGraphic","h","cameraSetViewCartesian3","HandlerManager","handlers","addHandler","BaseLayers","layersIdConfig","addLayer","config","key","provider","TileMapServiceImageryProvider","matrixIds","WebMapTileServiceImageryProvider","layer","typename","style","format","tileMatrixSetID","tileMatrixLabels","tilingScheme","GeographicTilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","OpenStreetMapImageryProvider","subdomains","maximumLevel","createWorldImagery","IonWorldImageryStyle","AERIAL","AERIAL_WITH_LABELS","Cesium3DTileset","maximumScreenSpaceError","maximumNumberOfLoadedTiles","IonResource","fromAssetId","terrainProvider","CesiumTerrainProvider","createWorldTerrain","requestWaterMask","addImageryProvider","order","_ready","EllipsoidTerrainProvider","RenderPlanes","TerrainProvider","PrimitivesTree","tree","addNode","getNode","removeNode","updateNode","VERSION"],"mappings":"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"}